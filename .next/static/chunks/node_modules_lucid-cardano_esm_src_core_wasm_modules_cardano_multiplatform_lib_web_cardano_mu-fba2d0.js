"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_lucid-cardano_esm_src_core_wasm_modules_cardano_multiplatform_lib_web_cardano_mu-fba2d0"],{

/***/ "./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Address\": function() { return /* binding */ Address; },\n/* harmony export */   \"AssetName\": function() { return /* binding */ AssetName; },\n/* harmony export */   \"AssetNames\": function() { return /* binding */ AssetNames; },\n/* harmony export */   \"Assets\": function() { return /* binding */ Assets; },\n/* harmony export */   \"AuxiliaryData\": function() { return /* binding */ AuxiliaryData; },\n/* harmony export */   \"AuxiliaryDataHash\": function() { return /* binding */ AuxiliaryDataHash; },\n/* harmony export */   \"AuxiliaryDataSet\": function() { return /* binding */ AuxiliaryDataSet; },\n/* harmony export */   \"BaseAddress\": function() { return /* binding */ BaseAddress; },\n/* harmony export */   \"BigInt\": function() { return /* binding */ BigInt; },\n/* harmony export */   \"BigNum\": function() { return /* binding */ BigNum; },\n/* harmony export */   \"Bip32PrivateKey\": function() { return /* binding */ Bip32PrivateKey; },\n/* harmony export */   \"Bip32PublicKey\": function() { return /* binding */ Bip32PublicKey; },\n/* harmony export */   \"Block\": function() { return /* binding */ Block; },\n/* harmony export */   \"BlockHash\": function() { return /* binding */ BlockHash; },\n/* harmony export */   \"Blockfrost\": function() { return /* binding */ Blockfrost; },\n/* harmony export */   \"BootstrapWitness\": function() { return /* binding */ BootstrapWitness; },\n/* harmony export */   \"BootstrapWitnesses\": function() { return /* binding */ BootstrapWitnesses; },\n/* harmony export */   \"ByronAddress\": function() { return /* binding */ ByronAddress; },\n/* harmony export */   \"Certificate\": function() { return /* binding */ Certificate; },\n/* harmony export */   \"CertificateKind\": function() { return /* binding */ CertificateKind; },\n/* harmony export */   \"Certificates\": function() { return /* binding */ Certificates; },\n/* harmony export */   \"ConstrPlutusData\": function() { return /* binding */ ConstrPlutusData; },\n/* harmony export */   \"CostModel\": function() { return /* binding */ CostModel; },\n/* harmony export */   \"Costmdls\": function() { return /* binding */ Costmdls; },\n/* harmony export */   \"DNSRecordAorAAAA\": function() { return /* binding */ DNSRecordAorAAAA; },\n/* harmony export */   \"DNSRecordSRV\": function() { return /* binding */ DNSRecordSRV; },\n/* harmony export */   \"Data\": function() { return /* binding */ Data; },\n/* harmony export */   \"DataHash\": function() { return /* binding */ DataHash; },\n/* harmony export */   \"Datum\": function() { return /* binding */ Datum; },\n/* harmony export */   \"DatumKind\": function() { return /* binding */ DatumKind; },\n/* harmony export */   \"Ed25519KeyHash\": function() { return /* binding */ Ed25519KeyHash; },\n/* harmony export */   \"Ed25519KeyHashes\": function() { return /* binding */ Ed25519KeyHashes; },\n/* harmony export */   \"Ed25519Signature\": function() { return /* binding */ Ed25519Signature; },\n/* harmony export */   \"EnterpriseAddress\": function() { return /* binding */ EnterpriseAddress; },\n/* harmony export */   \"ExUnitPrices\": function() { return /* binding */ ExUnitPrices; },\n/* harmony export */   \"ExUnits\": function() { return /* binding */ ExUnits; },\n/* harmony export */   \"GeneralTransactionMetadata\": function() { return /* binding */ GeneralTransactionMetadata; },\n/* harmony export */   \"GenesisDelegateHash\": function() { return /* binding */ GenesisDelegateHash; },\n/* harmony export */   \"GenesisHash\": function() { return /* binding */ GenesisHash; },\n/* harmony export */   \"GenesisHashes\": function() { return /* binding */ GenesisHashes; },\n/* harmony export */   \"GenesisKeyDelegation\": function() { return /* binding */ GenesisKeyDelegation; },\n/* harmony export */   \"Header\": function() { return /* binding */ Header; },\n/* harmony export */   \"HeaderBody\": function() { return /* binding */ HeaderBody; },\n/* harmony export */   \"Int\": function() { return /* binding */ Int; },\n/* harmony export */   \"Ipv4\": function() { return /* binding */ Ipv4; },\n/* harmony export */   \"Ipv6\": function() { return /* binding */ Ipv6; },\n/* harmony export */   \"KESSignature\": function() { return /* binding */ KESSignature; },\n/* harmony export */   \"KESVKey\": function() { return /* binding */ KESVKey; },\n/* harmony export */   \"Language\": function() { return /* binding */ Language; },\n/* harmony export */   \"LanguageKind\": function() { return /* binding */ LanguageKind; },\n/* harmony export */   \"Languages\": function() { return /* binding */ Languages; },\n/* harmony export */   \"LegacyDaedalusPrivateKey\": function() { return /* binding */ LegacyDaedalusPrivateKey; },\n/* harmony export */   \"LinearFee\": function() { return /* binding */ LinearFee; },\n/* harmony export */   \"MIRKind\": function() { return /* binding */ MIRKind; },\n/* harmony export */   \"MIRPot\": function() { return /* binding */ MIRPot; },\n/* harmony export */   \"MIRToStakeCredentials\": function() { return /* binding */ MIRToStakeCredentials; },\n/* harmony export */   \"MetadataJsonSchema\": function() { return /* binding */ MetadataJsonSchema; },\n/* harmony export */   \"MetadataList\": function() { return /* binding */ MetadataList; },\n/* harmony export */   \"MetadataMap\": function() { return /* binding */ MetadataMap; },\n/* harmony export */   \"Mint\": function() { return /* binding */ Mint; },\n/* harmony export */   \"MintAssets\": function() { return /* binding */ MintAssets; },\n/* harmony export */   \"MoveInstantaneousReward\": function() { return /* binding */ MoveInstantaneousReward; },\n/* harmony export */   \"MoveInstantaneousRewardsCert\": function() { return /* binding */ MoveInstantaneousRewardsCert; },\n/* harmony export */   \"MultiAsset\": function() { return /* binding */ MultiAsset; },\n/* harmony export */   \"MultiHostName\": function() { return /* binding */ MultiHostName; },\n/* harmony export */   \"NativeScript\": function() { return /* binding */ NativeScript; },\n/* harmony export */   \"NativeScriptKind\": function() { return /* binding */ NativeScriptKind; },\n/* harmony export */   \"NativeScripts\": function() { return /* binding */ NativeScripts; },\n/* harmony export */   \"NetworkId\": function() { return /* binding */ NetworkId; },\n/* harmony export */   \"NetworkIdKind\": function() { return /* binding */ NetworkIdKind; },\n/* harmony export */   \"NetworkInfo\": function() { return /* binding */ NetworkInfo; },\n/* harmony export */   \"Nonce\": function() { return /* binding */ Nonce; },\n/* harmony export */   \"OperationalCert\": function() { return /* binding */ OperationalCert; },\n/* harmony export */   \"PlutusData\": function() { return /* binding */ PlutusData; },\n/* harmony export */   \"PlutusDataKind\": function() { return /* binding */ PlutusDataKind; },\n/* harmony export */   \"PlutusDatumSchema\": function() { return /* binding */ PlutusDatumSchema; },\n/* harmony export */   \"PlutusList\": function() { return /* binding */ PlutusList; },\n/* harmony export */   \"PlutusMap\": function() { return /* binding */ PlutusMap; },\n/* harmony export */   \"PlutusScript\": function() { return /* binding */ PlutusScript; },\n/* harmony export */   \"PlutusScripts\": function() { return /* binding */ PlutusScripts; },\n/* harmony export */   \"PlutusWitness\": function() { return /* binding */ PlutusWitness; },\n/* harmony export */   \"Pointer\": function() { return /* binding */ Pointer; },\n/* harmony export */   \"PointerAddress\": function() { return /* binding */ PointerAddress; },\n/* harmony export */   \"PoolMetadata\": function() { return /* binding */ PoolMetadata; },\n/* harmony export */   \"PoolMetadataHash\": function() { return /* binding */ PoolMetadataHash; },\n/* harmony export */   \"PoolParams\": function() { return /* binding */ PoolParams; },\n/* harmony export */   \"PoolRegistration\": function() { return /* binding */ PoolRegistration; },\n/* harmony export */   \"PoolRetirement\": function() { return /* binding */ PoolRetirement; },\n/* harmony export */   \"PrivateKey\": function() { return /* binding */ PrivateKey; },\n/* harmony export */   \"ProposedProtocolParameterUpdates\": function() { return /* binding */ ProposedProtocolParameterUpdates; },\n/* harmony export */   \"ProtocolParamUpdate\": function() { return /* binding */ ProtocolParamUpdate; },\n/* harmony export */   \"ProtocolVersion\": function() { return /* binding */ ProtocolVersion; },\n/* harmony export */   \"PublicKey\": function() { return /* binding */ PublicKey; },\n/* harmony export */   \"PublicKeys\": function() { return /* binding */ PublicKeys; },\n/* harmony export */   \"Redeemer\": function() { return /* binding */ Redeemer; },\n/* harmony export */   \"RedeemerTag\": function() { return /* binding */ RedeemerTag; },\n/* harmony export */   \"RedeemerTagKind\": function() { return /* binding */ RedeemerTagKind; },\n/* harmony export */   \"RedeemerWitnessKey\": function() { return /* binding */ RedeemerWitnessKey; },\n/* harmony export */   \"Redeemers\": function() { return /* binding */ Redeemers; },\n/* harmony export */   \"Relay\": function() { return /* binding */ Relay; },\n/* harmony export */   \"RelayKind\": function() { return /* binding */ RelayKind; },\n/* harmony export */   \"Relays\": function() { return /* binding */ Relays; },\n/* harmony export */   \"RequiredWitnessSet\": function() { return /* binding */ RequiredWitnessSet; },\n/* harmony export */   \"RewardAddress\": function() { return /* binding */ RewardAddress; },\n/* harmony export */   \"RewardAddresses\": function() { return /* binding */ RewardAddresses; },\n/* harmony export */   \"Script\": function() { return /* binding */ Script; },\n/* harmony export */   \"ScriptAll\": function() { return /* binding */ ScriptAll; },\n/* harmony export */   \"ScriptAny\": function() { return /* binding */ ScriptAny; },\n/* harmony export */   \"ScriptDataHash\": function() { return /* binding */ ScriptDataHash; },\n/* harmony export */   \"ScriptHash\": function() { return /* binding */ ScriptHash; },\n/* harmony export */   \"ScriptHashNamespace\": function() { return /* binding */ ScriptHashNamespace; },\n/* harmony export */   \"ScriptHashes\": function() { return /* binding */ ScriptHashes; },\n/* harmony export */   \"ScriptKind\": function() { return /* binding */ ScriptKind; },\n/* harmony export */   \"ScriptNOfK\": function() { return /* binding */ ScriptNOfK; },\n/* harmony export */   \"ScriptPubkey\": function() { return /* binding */ ScriptPubkey; },\n/* harmony export */   \"ScriptRef\": function() { return /* binding */ ScriptRef; },\n/* harmony export */   \"ScriptSchema\": function() { return /* binding */ ScriptSchema; },\n/* harmony export */   \"ScriptWitness\": function() { return /* binding */ ScriptWitness; },\n/* harmony export */   \"ScriptWitnessKind\": function() { return /* binding */ ScriptWitnessKind; },\n/* harmony export */   \"SingleHostAddr\": function() { return /* binding */ SingleHostAddr; },\n/* harmony export */   \"SingleHostName\": function() { return /* binding */ SingleHostName; },\n/* harmony export */   \"StakeCredKind\": function() { return /* binding */ StakeCredKind; },\n/* harmony export */   \"StakeCredential\": function() { return /* binding */ StakeCredential; },\n/* harmony export */   \"StakeCredentials\": function() { return /* binding */ StakeCredentials; },\n/* harmony export */   \"StakeDelegation\": function() { return /* binding */ StakeDelegation; },\n/* harmony export */   \"StakeDeregistration\": function() { return /* binding */ StakeDeregistration; },\n/* harmony export */   \"StakeRegistration\": function() { return /* binding */ StakeRegistration; },\n/* harmony export */   \"Strings\": function() { return /* binding */ Strings; },\n/* harmony export */   \"TimelockExpiry\": function() { return /* binding */ TimelockExpiry; },\n/* harmony export */   \"TimelockStart\": function() { return /* binding */ TimelockStart; },\n/* harmony export */   \"Transaction\": function() { return /* binding */ Transaction; },\n/* harmony export */   \"TransactionBodies\": function() { return /* binding */ TransactionBodies; },\n/* harmony export */   \"TransactionBody\": function() { return /* binding */ TransactionBody; },\n/* harmony export */   \"TransactionBuilder\": function() { return /* binding */ TransactionBuilder; },\n/* harmony export */   \"TransactionBuilderConfig\": function() { return /* binding */ TransactionBuilderConfig; },\n/* harmony export */   \"TransactionBuilderConfigBuilder\": function() { return /* binding */ TransactionBuilderConfigBuilder; },\n/* harmony export */   \"TransactionHash\": function() { return /* binding */ TransactionHash; },\n/* harmony export */   \"TransactionIndexes\": function() { return /* binding */ TransactionIndexes; },\n/* harmony export */   \"TransactionInput\": function() { return /* binding */ TransactionInput; },\n/* harmony export */   \"TransactionInputs\": function() { return /* binding */ TransactionInputs; },\n/* harmony export */   \"TransactionMetadatum\": function() { return /* binding */ TransactionMetadatum; },\n/* harmony export */   \"TransactionMetadatumKind\": function() { return /* binding */ TransactionMetadatumKind; },\n/* harmony export */   \"TransactionMetadatumLabels\": function() { return /* binding */ TransactionMetadatumLabels; },\n/* harmony export */   \"TransactionOutput\": function() { return /* binding */ TransactionOutput; },\n/* harmony export */   \"TransactionOutputAmountBuilder\": function() { return /* binding */ TransactionOutputAmountBuilder; },\n/* harmony export */   \"TransactionOutputBuilder\": function() { return /* binding */ TransactionOutputBuilder; },\n/* harmony export */   \"TransactionOutputs\": function() { return /* binding */ TransactionOutputs; },\n/* harmony export */   \"TransactionUnspentOutput\": function() { return /* binding */ TransactionUnspentOutput; },\n/* harmony export */   \"TransactionUnspentOutputs\": function() { return /* binding */ TransactionUnspentOutputs; },\n/* harmony export */   \"TransactionWitnessSet\": function() { return /* binding */ TransactionWitnessSet; },\n/* harmony export */   \"TransactionWitnessSetBuilder\": function() { return /* binding */ TransactionWitnessSetBuilder; },\n/* harmony export */   \"TransactionWitnessSets\": function() { return /* binding */ TransactionWitnessSets; },\n/* harmony export */   \"URL\": function() { return /* binding */ URL; },\n/* harmony export */   \"UnitInterval\": function() { return /* binding */ UnitInterval; },\n/* harmony export */   \"Update\": function() { return /* binding */ Update; },\n/* harmony export */   \"VRFCert\": function() { return /* binding */ VRFCert; },\n/* harmony export */   \"VRFKeyHash\": function() { return /* binding */ VRFKeyHash; },\n/* harmony export */   \"VRFVKey\": function() { return /* binding */ VRFVKey; },\n/* harmony export */   \"Value\": function() { return /* binding */ Value; },\n/* harmony export */   \"Vkey\": function() { return /* binding */ Vkey; },\n/* harmony export */   \"Vkeys\": function() { return /* binding */ Vkeys; },\n/* harmony export */   \"Vkeywitness\": function() { return /* binding */ Vkeywitness; },\n/* harmony export */   \"Vkeywitnesses\": function() { return /* binding */ Vkeywitnesses; },\n/* harmony export */   \"Withdrawals\": function() { return /* binding */ Withdrawals; },\n/* harmony export */   \"apply_params_to_plutus_script\": function() { return /* binding */ apply_params_to_plutus_script; },\n/* harmony export */   \"decode_arbitrary_bytes_from_metadatum\": function() { return /* binding */ decode_arbitrary_bytes_from_metadatum; },\n/* harmony export */   \"decode_metadatum_to_json_str\": function() { return /* binding */ decode_metadatum_to_json_str; },\n/* harmony export */   \"decode_plutus_datum_to_json_str\": function() { return /* binding */ decode_plutus_datum_to_json_str; },\n/* harmony export */   \"decrypt_with_password\": function() { return /* binding */ decrypt_with_password; },\n/* harmony export */   \"encode_arbitrary_bytes_as_metadatum\": function() { return /* binding */ encode_arbitrary_bytes_as_metadatum; },\n/* harmony export */   \"encode_json_str_to_metadatum\": function() { return /* binding */ encode_json_str_to_metadatum; },\n/* harmony export */   \"encode_json_str_to_native_script\": function() { return /* binding */ encode_json_str_to_native_script; },\n/* harmony export */   \"encode_json_str_to_plutus_datum\": function() { return /* binding */ encode_json_str_to_plutus_datum; },\n/* harmony export */   \"encrypt_with_password\": function() { return /* binding */ encrypt_with_password; },\n/* harmony export */   \"get_deposit\": function() { return /* binding */ get_deposit; },\n/* harmony export */   \"get_implicit_input\": function() { return /* binding */ get_implicit_input; },\n/* harmony export */   \"hash_auxiliary_data\": function() { return /* binding */ hash_auxiliary_data; },\n/* harmony export */   \"hash_blake2b224\": function() { return /* binding */ hash_blake2b224; },\n/* harmony export */   \"hash_blake2b256\": function() { return /* binding */ hash_blake2b256; },\n/* harmony export */   \"hash_plutus_data\": function() { return /* binding */ hash_plutus_data; },\n/* harmony export */   \"hash_script_data\": function() { return /* binding */ hash_script_data; },\n/* harmony export */   \"hash_transaction\": function() { return /* binding */ hash_transaction; },\n/* harmony export */   \"initSync\": function() { return /* binding */ initSync; },\n/* harmony export */   \"make_daedalus_bootstrap_witness\": function() { return /* binding */ make_daedalus_bootstrap_witness; },\n/* harmony export */   \"make_icarus_bootstrap_witness\": function() { return /* binding */ make_icarus_bootstrap_witness; },\n/* harmony export */   \"make_vkey_witness\": function() { return /* binding */ make_vkey_witness; },\n/* harmony export */   \"min_ada_required\": function() { return /* binding */ min_ada_required; },\n/* harmony export */   \"min_fee\": function() { return /* binding */ min_fee; }\n/* harmony export */ });\nlet wasm;\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 132)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nconst cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nconst cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    };\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        }\n        finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n            }\n            else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    return real;\n}\nfunction __wbg_adapter_30(arg0, arg1, arg2) {\n    wasm\n        ._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8b6cac31a9c50230(arg0, arg1, addHeapObject(arg2));\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n * @param {Transaction} tx\n * @param {LinearFee} linear_fee\n * @param {ExUnitPrices} ex_unit_prices\n * @returns {BigNum}\n */\nfunction min_fee(tx, linear_fee, ex_unit_prices) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(tx, Transaction);\n        _assertClass(linear_fee, LinearFee);\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        wasm.min_fee(retptr, tx.ptr, linear_fee.ptr, ex_unit_prices.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {TransactionMetadatum}\n */\nfunction encode_arbitrary_bytes_as_metadatum(bytes) {\n    const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadata\n * @returns {Uint8Array}\n */\nfunction decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {TransactionMetadatum}\n */\nfunction encode_json_str_to_metadatum(json, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_metadatum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return TransactionMetadatum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionMetadatum} metadatum\n * @param {number} schema\n * @returns {string}\n */\nfunction decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0;\n            len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr0, len0);\n    }\n}\nlet cachedUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n * @param {string} password\n * @param {string} salt\n * @param {string} nonce\n * @param {string} data\n * @returns {string}\n */\nfunction encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0;\n            len4 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr4, len4);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr4, len4);\n    }\n}\n/**\n * @param {string} password\n * @param {string} data\n * @returns {string}\n */\nfunction decrypt_with_password(password, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0;\n            len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n/**\n * @param {PlutusList} params\n * @param {PlutusScript} plutus_script\n * @returns {PlutusScript}\n */\nfunction apply_params_to_plutus_script(params, plutus_script) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(params, PlutusList);\n        _assertClass(plutus_script, PlutusScript);\n        var ptr0 = plutus_script.__destroy_into_raw();\n        wasm.apply_params_to_plutus_script(retptr, params.ptr, ptr0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return PlutusScript.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {LegacyDaedalusPrivateKey} key\n * @returns {BootstrapWitness}\n */\nfunction make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    const ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {Bip32PrivateKey} key\n * @returns {BootstrapWitness}\n */\nfunction make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    const ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {PrivateKey} sk\n * @returns {Vkeywitness}\n */\nfunction make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    const ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n/**\n * @param {AuxiliaryData} auxiliary_data\n * @returns {AuxiliaryDataHash}\n */\nfunction hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    const ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} tx_body\n * @returns {TransactionHash}\n */\nfunction hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    const ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n/**\n * @param {PlutusData} plutus_data\n * @returns {DataHash}\n */\nfunction hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    const ret = wasm.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction hash_blake2b256(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b256(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction hash_blake2b224(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b224(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Redeemers} redeemers\n * @param {Costmdls} cost_models\n * @param {PlutusList | undefined} datums\n * @returns {ScriptDataHash}\n */\nfunction hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.__destroy_into_raw();\n    }\n    const ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {Value}\n */\nfunction get_implicit_input(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        wasm.get_implicit_input(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Value.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {BigNum}\n */\nfunction get_deposit(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        wasm.get_deposit(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {TransactionOutput} output\n * @param {BigNum} coins_per_utxo_byte\n * @returns {BigNum}\n */\nfunction min_ada_required(output, coins_per_utxo_byte) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(output, TransactionOutput);\n        _assertClass(coins_per_utxo_byte, BigNum);\n        wasm.min_ada_required(retptr, output.ptr, coins_per_utxo_byte.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * Receives a script JSON string\n * and returns a NativeScript.\n * Cardano Wallet and Node styles are supported.\n *\n * * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n * * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n *\n * self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n * @param {string} json\n * @param {string} self_xpub\n * @param {number} schema\n * @returns {NativeScript}\n */\nfunction encode_json_str_to_native_script(json, self_xpub, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(self_xpub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_native_script(retptr, ptr0, len0, ptr1, len1, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NativeScript.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {PlutusData}\n */\nfunction encode_json_str_to_plutus_datum(json, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.encode_json_str_to_plutus_datum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return PlutusData.__wrap(r0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {PlutusData} datum\n * @param {number} schema\n * @returns {string}\n */\nfunction decode_plutus_datum_to_json_str(datum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(datum, PlutusData);\n        wasm.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0;\n            len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr0, len0);\n    }\n}\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    }\n    catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_1367(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h271eb41e68580694(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n/** */\nconst CertificateKind = Object.freeze({\n    StakeRegistration: 0,\n    \"0\": \"StakeRegistration\",\n    StakeDeregistration: 1,\n    \"1\": \"StakeDeregistration\",\n    StakeDelegation: 2,\n    \"2\": \"StakeDelegation\",\n    PoolRegistration: 3,\n    \"3\": \"PoolRegistration\",\n    PoolRetirement: 4,\n    \"4\": \"PoolRetirement\",\n    GenesisKeyDelegation: 5,\n    \"5\": \"GenesisKeyDelegation\",\n    MoveInstantaneousRewardsCert: 6,\n    \"6\": \"MoveInstantaneousRewardsCert\",\n});\n/** */\nconst MIRPot = Object.freeze({\n    Reserves: 0,\n    \"0\": \"Reserves\",\n    Treasury: 1,\n    \"1\": \"Treasury\",\n});\n/** */\nconst MIRKind = Object.freeze({\n    ToOtherPot: 0,\n    \"0\": \"ToOtherPot\",\n    ToStakeCredentials: 1,\n    \"1\": \"ToStakeCredentials\",\n});\n/** */\nconst RelayKind = Object.freeze({\n    SingleHostAddr: 0,\n    \"0\": \"SingleHostAddr\",\n    SingleHostName: 1,\n    \"1\": \"SingleHostName\",\n    MultiHostName: 2,\n    \"2\": \"MultiHostName\",\n});\n/** */\nconst NativeScriptKind = Object.freeze({\n    ScriptPubkey: 0,\n    \"0\": \"ScriptPubkey\",\n    ScriptAll: 1,\n    \"1\": \"ScriptAll\",\n    ScriptAny: 2,\n    \"2\": \"ScriptAny\",\n    ScriptNOfK: 3,\n    \"3\": \"ScriptNOfK\",\n    TimelockStart: 4,\n    \"4\": \"TimelockStart\",\n    TimelockExpiry: 5,\n    \"5\": \"TimelockExpiry\",\n});\n/** */\nconst NetworkIdKind = Object.freeze({\n    Testnet: 0,\n    \"0\": \"Testnet\",\n    Mainnet: 1,\n    \"1\": \"Mainnet\",\n});\n/** */\nconst TransactionMetadatumKind = Object.freeze({\n    MetadataMap: 0,\n    \"0\": \"MetadataMap\",\n    MetadataList: 1,\n    \"1\": \"MetadataList\",\n    Int: 2,\n    \"2\": \"Int\",\n    Bytes: 3,\n    \"3\": \"Bytes\",\n    Text: 4,\n    \"4\": \"Text\",\n});\n/** */\nconst MetadataJsonSchema = Object.freeze({\n    NoConversions: 0,\n    \"0\": \"NoConversions\",\n    BasicConversions: 1,\n    \"1\": \"BasicConversions\",\n    DetailedSchema: 2,\n    \"2\": \"DetailedSchema\",\n});\n/** */\nconst StakeCredKind = Object.freeze({\n    Key: 0,\n    \"0\": \"Key\",\n    Script: 1,\n    \"1\": \"Script\",\n});\n/** */\nconst ScriptWitnessKind = Object.freeze({\n    NativeWitness: 0,\n    \"0\": \"NativeWitness\",\n    PlutusWitness: 1,\n    \"1\": \"PlutusWitness\",\n});\n/**\n * Each new language uses a different namespace for hashing its script\n * This is because you could have a language where the same bytes have different semantics\n * So this avoids scripts in different languages mapping to the same hash\n * Note that the enum value here is different than the enum value for deciding the cost model of a script\n * https://github.com/input-output-hk/cardano-ledger/blob/9c3b4737b13b30f71529e76c5330f403165e28a6/eras/alonzo/impl/src/Cardano/Ledger/Alonzo.hs#L127\n */\nconst ScriptHashNamespace = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusV1: 1,\n    \"1\": \"PlutusV1\",\n    PlutusV2: 2,\n    \"2\": \"PlutusV2\",\n});\n/**\n * Used to choose the schema for a script JSON string\n */\nconst ScriptSchema = Object.freeze({\n    Wallet: 0,\n    \"0\": \"Wallet\",\n    Node: 1,\n    \"1\": \"Node\",\n});\n/** */\nconst LanguageKind = Object.freeze({\n    PlutusV1: 0,\n    \"0\": \"PlutusV1\",\n    PlutusV2: 1,\n    \"1\": \"PlutusV2\",\n});\n/** */\nconst PlutusDataKind = Object.freeze({\n    ConstrPlutusData: 0,\n    \"0\": \"ConstrPlutusData\",\n    Map: 1,\n    \"1\": \"Map\",\n    List: 2,\n    \"2\": \"List\",\n    Integer: 3,\n    \"3\": \"Integer\",\n    Bytes: 4,\n    \"4\": \"Bytes\",\n});\n/** */\nconst RedeemerTagKind = Object.freeze({\n    Spend: 0,\n    \"0\": \"Spend\",\n    Mint: 1,\n    \"1\": \"Mint\",\n    Cert: 2,\n    \"2\": \"Cert\",\n    Reward: 3,\n    \"3\": \"Reward\",\n});\n/**\n * JSON <-> PlutusData conversion schemas.\n * Follows ScriptDataJsonSchema in cardano-cli defined at:\n * https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n *\n * All methods here have the following restrictions due to limitations on dependencies:\n * * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n * * Hex strings for bytes don't accept odd-length (half-byte) strings.\n *      cardano-cli seems to support these however but it seems to be different than just 0-padding\n *      on either side when tested so proceed with caution\n */\nconst PlutusDatumSchema = Object.freeze({\n    /**\n     * ScriptDataJsonNoSchema in cardano-node.\n     *\n     * This is the format used by --script-data-value in cardano-cli\n     * This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n     * To JSON:\n     * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n     * * Lists not supported in keys\n     * * Maps not supported in keys\n     */\n    BasicConversions: 0,\n    \"0\": \"BasicConversions\",\n    /**\n     * ScriptDataJsonDetailedSchema in cardano-node.\n     *\n     * This is the format used by --script-data-file in cardano-cli\n     * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n     * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n     * 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n     *    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n     * 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n     *    Integer's value is a JSON number e.g. {\"int\": 100}\n     *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n     *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n     *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n     *          respectively with their values being the plutus datum encoded via this same schema\n     *          e.g. {\"map\": [\n     *              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n     *              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n     *          ]}\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * the JSON must conform to a very specific schema\n     * To JSON:\n     * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n     */\n    DetailedSchema: 1,\n    \"1\": \"DetailedSchema\",\n});\n/** */\nconst ScriptKind = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusScriptV1: 1,\n    \"1\": \"PlutusScriptV1\",\n    PlutusScriptV2: 2,\n    \"2\": \"PlutusScriptV2\",\n});\n/** */\nconst DatumKind = Object.freeze({\n    Hash: 0,\n    \"0\": \"Hash\",\n    Data: 1,\n    \"1\": \"Data\",\n});\n/** */\nclass Address {\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Address}\n     */\n    static from_bytes(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Address}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | undefined} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Address}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.address_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ByronAddress | undefined}\n     */\n    as_byron() {\n        const ret = wasm.address_as_byron(this.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress | undefined}\n     */\n    as_reward() {\n        const ret = wasm.address_as_reward(this.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {PointerAddress | undefined}\n     */\n    as_pointer() {\n        const ret = wasm.address_as_pointer(this.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {EnterpriseAddress | undefined}\n     */\n    as_enterprise() {\n        const ret = wasm.address_as_enterprise(this.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {BaseAddress | undefined}\n     */\n    as_base() {\n        const ret = wasm.address_as_base(this.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nclass AssetName {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} name\n     * @returns {AssetName}\n     */\n    static new(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetname_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass AssetNames {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetNames}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetnames_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetNames}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assetnames_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {AssetName}\n     */\n    get(index) {\n        const ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} elem\n     */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Assets {\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Assets}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Assets}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.assets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Assets}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        const ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        const ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nclass AuxiliaryData {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {AuxiliaryData}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {AuxiliaryData}\n     */\n    static new() {\n        const ret = wasm.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata | undefined}\n     */\n    metadata() {\n        const ret = wasm.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        const ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\n/** */\nclass AuxiliaryDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass AuxiliaryDataSet {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @param {AuxiliaryData} data\n     * @returns {AuxiliaryData | undefined}\n     */\n    insert(tx_index, data) {\n        _assertClass(tx_index, BigNum);\n        _assertClass(data, AuxiliaryData);\n        const ret = wasm.auxiliarydataset_insert(this.ptr, tx_index.ptr, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @returns {AuxiliaryData | undefined}\n     */\n    get(tx_index) {\n        _assertClass(tx_index, BigNum);\n        const ret = wasm.auxiliarydataset_get(this.ptr, tx_index.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    indices() {\n        const ret = wasm.auxiliarydataset_indices(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n}\n/** */\nclass BaseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {StakeCredential} stake\n     * @returns {BaseAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        const ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_cred() {\n        const ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {BaseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_base(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nclass BigInt {\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigInt}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bigint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_u64() {\n        const ret = wasm.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        const ret = wasm.bigint_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {BigInt}\n     */\n    static from_str(text) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bigint_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nclass BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bignum_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    static zero() {\n        const ret = wasm.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        const ret = wasm.bignum_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_mul(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_add(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_sub(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_div(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div_ceil(other) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            wasm.bignum_checked_div_ceil(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * returns 0 if it would otherwise underflow\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        const ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} rhs_value\n     * @returns {number}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        const ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\n/** */\nclass Bip32PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n     * derive this private key with the given index.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PrivateKey}\n     */\n    derive(index) {\n        const ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * 128-byte xprv a key format in Cardano that some software still uses or requires\n     * the traditional 96-byte xprv is simply encoded as\n     * prv | chaincode\n     * however, because some software may not know how to compute a public key from a private key,\n     * the 128-byte inlines the public key in the following format\n     * prv | pub | chaincode\n     * so be careful if you see the term \"xprv\" as it could refer to either one\n     * our library does not require the pub (instead we compute the pub key when needed)\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_128_xprv(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_128_xprv(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * see from_128_xprv\n     * @returns {Uint8Array}\n     */\n    to_128_xprv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Bip32PrivateKey}\n     */\n    static generate_ed25519_bip32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_generate_ed25519_bip32(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    to_raw_key() {\n        const ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Bip32PublicKey}\n     */\n    to_public() {\n        const ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {Uint8Array} entropy\n     * @param {Uint8Array} password\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bip39_entropy(entropy, password) {\n        const ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Bip32PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n     * derive this public key with the given index.\n     *\n     * # Errors\n     *\n     * If the index is not a soft derivation index (< 0x80000000) then\n     * calling this method will fail.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PublicKey}\n     */\n    derive(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_derive(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_raw_key() {\n        const ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PublicKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bip32publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Block {\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Block}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.block_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Block}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.block_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Header}\n     */\n    header() {\n        const ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    transaction_bodies() {\n        const ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    transaction_witness_sets() {\n        const ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    auxiliary_data_set() {\n        const ret = wasm.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    invalid_transactions() {\n        const ret = wasm.block_invalid_transactions(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @param {Header} header\n     * @param {TransactionBodies} transaction_bodies\n     * @param {TransactionWitnessSets} transaction_witness_sets\n     * @param {AuxiliaryDataSet} auxiliary_data_set\n     * @param {TransactionIndexes} invalid_transactions\n     * @returns {Block}\n     */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        _assertClass(invalid_transactions, TransactionIndexes);\n        const ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, invalid_transactions.ptr);\n        return Block.__wrap(ret);\n    }\n}\n/** */\nclass BlockHash {\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BlockHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {BlockHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {BlockHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Blockfrost {\n    static __wrap(ptr) {\n        const obj = Object.create(Blockfrost.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockfrost_free(ptr);\n    }\n    /**\n     * @param {string} url\n     * @param {string} project_id\n     * @returns {Blockfrost}\n     */\n    static new(url, project_id) {\n        const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(project_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.blockfrost_new(ptr0, len0, ptr1, len1);\n        return Blockfrost.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    project_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_project_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nclass BootstrapWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BootstrapWitness}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bootstrapwitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {BootstrapWitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.bootstrapwitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        const ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        const ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chain_code() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @param {Uint8Array} chain_code\n     * @param {Uint8Array} attributes\n     * @returns {BootstrapWitness}\n     */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/** */\nclass BootstrapWitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses}\n     */\n    static new() {\n        const ret = wasm.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BootstrapWitness}\n     */\n    get(index) {\n        const ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass ByronAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_base58() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ByronAddress}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.byronaddress_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n     * note: for bech32 addresses, you need to use network_id instead\n     * @returns {number}\n     */\n    byron_protocol_magic() {\n        const ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} s\n     * @returns {ByronAddress}\n     */\n    static from_base58(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.byronaddress_from_base58(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Bip32PublicKey} key\n     * @param {number} protocol_magic\n     * @returns {ByronAddress}\n     */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        const ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {boolean}\n     */\n    static is_valid(s) {\n        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {ByronAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_byron(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/** */\nclass Certificate {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificate}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificate}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {StakeRegistration} stake_registration\n     * @returns {Certificate}\n     */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        const ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDeregistration} stake_deregistration\n     * @returns {Certificate}\n     */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        const ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDelegation} stake_delegation\n     * @returns {Certificate}\n     */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        const ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRegistration} pool_registration\n     * @returns {Certificate}\n     */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        const ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRetirement} pool_retirement\n     * @returns {Certificate}\n     */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        const ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisKeyDelegation} genesis_key_delegation\n     * @returns {Certificate}\n     */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        const ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n     * @returns {Certificate}\n     */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        const ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {StakeRegistration | undefined}\n     */\n    as_stake_registration() {\n        const ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDeregistration | undefined}\n     */\n    as_stake_deregistration() {\n        const ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDelegation | undefined}\n     */\n    as_stake_delegation() {\n        const ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRegistration | undefined}\n     */\n    as_pool_registration() {\n        const ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRetirement | undefined}\n     */\n    as_pool_retirement() {\n        const ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisKeyDelegation | undefined}\n     */\n    as_genesis_key_delegation() {\n        const ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousRewardsCert | undefined}\n     */\n    as_move_instantaneous_rewards_cert() {\n        const ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nclass Certificates {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificates}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificates}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.certificates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Certificates}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Certificate}\n     */\n    get(index) {\n        const ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {Certificate} elem\n     */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass ConstrPlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ConstrPlutusData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.constrplutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ConstrPlutusData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    alternative() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    data() {\n        const ret = wasm.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} alternative\n     * @param {PlutusList} data\n     * @returns {ConstrPlutusData}\n     */\n    static new(alternative, data) {\n        _assertClass(alternative, BigNum);\n        _assertClass(data, PlutusList);\n        const ret = wasm.constrplutusdata_new(alternative.ptr, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/** */\nclass CostModel {\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CostModel}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.costmodel_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CostModel.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new() {\n        const ret = wasm.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new_plutus_v2() {\n        const ret = wasm.costmodel_new_plutus_v2();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @param {Int} cost\n     * @returns {Int}\n     */\n    set(operation, cost) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(cost, Int);\n            wasm.costmodel_set(retptr, this.ptr, operation, cost.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} operation\n     * @returns {Int}\n     */\n    get(operation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_get(retptr, this.ptr, operation);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nclass Costmdls {\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Costmdls}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.costmdls_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Costmdls.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Costmdls}\n     */\n    static new() {\n        const ret = wasm.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Language} key\n     * @param {CostModel} value\n     * @returns {CostModel | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        const ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @param {Language} key\n     * @returns {CostModel | undefined}\n     */\n    get(key) {\n        _assertClass(key, Language);\n        const ret = wasm.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {Languages}\n     */\n    keys() {\n        const ret = wasm.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\n/** */\nclass DNSRecordAorAAAA {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordAorAAAA}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordaoraaaa_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordAorAAAA}\n     */\n    static new(dns_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordaoraaaa_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nclass DNSRecordSRV {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordSRV}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordsrv_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordSRV}\n     */\n    static new(dns_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.dnsrecordsrv_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nclass Data {\n    static __wrap(ptr) {\n        const obj = Object.create(Data.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_data_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Data}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.data_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Data.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Data}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.data_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Data.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PlutusData} plutus_data\n     * @returns {Data}\n     */\n    static new(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        const ret = wasm.data_new(plutus_data.ptr);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    get() {\n        const ret = wasm.data_get(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n}\n/** */\nclass DataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {DataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {DataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Datum {\n    static __wrap(ptr) {\n        const obj = Object.create(Datum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Datum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Datum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Datum}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.datum_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Datum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {DataHash} data_hash\n     * @returns {Datum}\n     */\n    static new_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        const ret = wasm.datum_new_data_hash(data_hash.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {Data} data\n     * @returns {Datum}\n     */\n    static new_data(data) {\n        _assertClass(data, Data);\n        const ret = wasm.datum_new_data(data.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.datum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {DataHash | undefined}\n     */\n    as_data_hash() {\n        const ret = wasm.datum_as_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Data | undefined}\n     */\n    as_data() {\n        const ret = wasm.datum_as_data(this.ptr);\n        return ret === 0 ? undefined : Data.__wrap(ret);\n    }\n}\n/** */\nclass Ed25519KeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {Ed25519KeyHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Ed25519KeyHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Ed25519KeyHash}\n     */\n    get(index) {\n        const ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Ed25519Signature {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Ed25519Signature}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} input\n     * @returns {Ed25519Signature}\n     */\n    static from_hex(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519Signature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519signature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass EnterpriseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {EnterpriseAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {EnterpriseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_enterprise(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/** */\nclass ExUnitPrices {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnitPrices}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.exunitprices_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnitPrices.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    mem_price() {\n        const ret = wasm.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    step_price() {\n        const ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} mem_price\n     * @param {UnitInterval} step_price\n     * @returns {ExUnitPrices}\n     */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        const ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {number} mem_price\n     * @param {number} step_price\n     * @returns {ExUnitPrices}\n     */\n    static from_float(mem_price, step_price) {\n        const ret = wasm.exunitprices_from_float(mem_price, step_price);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/** */\nclass ExUnits {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnits}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.exunits_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    mem() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    steps() {\n        const ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} mem\n     * @param {BigNum} steps\n     * @returns {ExUnits}\n     */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        const ret = wasm.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/** */\nclass GeneralTransactionMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.generaltransactionmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.generaltransactionmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GeneralTransactionMetadata}\n     */\n    static new() {\n        const ret = wasm.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key\n     * @returns {TransactionMetadatum | undefined}\n     */\n    get(key) {\n        _assertClass(key, BigNum);\n        const ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    keys() {\n        const ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/** */\nclass GenesisDelegateHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisDelegateHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass GenesisHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass GenesisHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesishashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {GenesisHash}\n     */\n    get(index) {\n        const ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass GenesisKeyDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesiskeydelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genesiskeydelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {GenesisHash}\n     */\n    genesishash() {\n        const ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisDelegateHash}\n     */\n    genesis_delegate_hash() {\n        const ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        const ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} genesishash\n     * @param {GenesisDelegateHash} genesis_delegate_hash\n     * @param {VRFKeyHash} vrf_keyhash\n     * @returns {GenesisKeyDelegation}\n     */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        const ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/** */\nclass Header {\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Header}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.header_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Header}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.header_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {HeaderBody}\n     */\n    header_body() {\n        const ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {KESSignature}\n     */\n    body_signature() {\n        const ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n     * @param {HeaderBody} header_body\n     * @param {KESSignature} body_signature\n     * @returns {Header}\n     */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        const ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/** */\nclass HeaderBody {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderBody}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headerbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {HeaderBody}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.headerbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    block_number() {\n        const ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BlockHash | undefined}\n     */\n    prev_hash() {\n        const ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    issuer_vkey() {\n        const ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFVKey}\n     */\n    vrf_vkey() {\n        const ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    nonce_vrf() {\n        const ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    leader_vrf() {\n        const ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_body_size() {\n        const ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BlockHash}\n     */\n    block_body_hash() {\n        const ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {OperationalCert}\n     */\n    operational_cert() {\n        const ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {ProtocolVersion}\n     */\n    protocol_version() {\n        const ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {number} block_number\n     * @param {BigNum} slot\n     * @param {BlockHash | undefined} prev_hash\n     * @param {Vkey} issuer_vkey\n     * @param {VRFVKey} vrf_vkey\n     * @param {VRFCert} nonce_vrf\n     * @param {VRFCert} leader_vrf\n     * @param {number} block_body_size\n     * @param {BlockHash} block_body_hash\n     * @param {OperationalCert} operational_cert\n     * @param {ProtocolVersion} protocol_version\n     * @returns {HeaderBody}\n     */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        _assertClass(slot, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.__destroy_into_raw();\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        const ret = wasm.headerbody_new(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/** */\nclass Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Int}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.int_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        const ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        const ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        const ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        const ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the BigNum representation\n     * only in case the underlying i128 value is positive.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        const ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the *absolute* BigNum representation\n     * only in case the underlying i128 value is negative.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        const ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * !!! DEPRECATED !!!\n     * Returns an i32 value in case the underlying original i128 value is within the limits.\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32_or_nothing() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * JsError in case of out of boundary overflow\n     * @returns {number}\n     */\n    as_i32_or_fail() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32_or_fail(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns string representation of the underlying i128 value directly.\n     * Might contain the minus sign (-) in case of negative value.\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {Int}\n     */\n    static from_str(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.int_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Ipv4 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv4}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv4}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv4}\n     */\n    static new(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv4_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Ipv6 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv6}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv6}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv6}\n     */\n    static new(data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ipv6_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass KESSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESSignature}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kessignature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESSignature.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass KESVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESVKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {KESVKey}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {KESVKey}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Language {\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_language_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Language}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.language_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Language.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v1() {\n        const ret = wasm.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v2() {\n        const ret = wasm.language_new_plutus_v2();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nclass Languages {\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languages_free(ptr);\n    }\n    /**\n     * @returns {Languages}\n     */\n    static new() {\n        const ret = wasm.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Language}\n     */\n    get(index) {\n        const ret = wasm.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @param {Language} elem\n     */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.__destroy_into_raw();\n        wasm.languages_add(this.ptr, ptr0);\n    }\n}\n/** */\nclass LegacyDaedalusPrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {LegacyDaedalusPrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.legacydaedalusprivatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LegacyDaedalusPrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass LinearFee {\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    constant() {\n        const ret = wasm.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coefficient() {\n        const ret = wasm.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coefficient\n     * @param {BigNum} constant\n     * @returns {LinearFee}\n     */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        const ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/** */\nclass MIRToStakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mirtostakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mirtostakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MIRToStakeCredentials}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @param {Int} delta\n     * @returns {Int | undefined}\n     */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        const ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @returns {Int | undefined}\n     */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        const ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    keys() {\n        const ret = wasm.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/** */\nclass MetadataList {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataList}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatalist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    static new() {\n        const ret = wasm.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionMetadatum}\n     */\n    get(index) {\n        const ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass MetadataMap {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatamap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    static new() {\n        const ret = wasm.generaltransactionmetadata_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_str(key, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(value, TransactionMetadatum);\n            wasm.metadatamap_insert_str(retptr, this.ptr, ptr0, len0, value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        const ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {TransactionMetadatum}\n     */\n    get(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, TransactionMetadatum);\n            wasm.metadatamap_get(retptr, this.ptr, key.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} key\n     * @returns {TransactionMetadatum}\n     */\n    get_str(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.metadatamap_get_str(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} key\n     * @returns {TransactionMetadatum}\n     */\n    get_i32(key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_get_i32(retptr, this.ptr, key);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {boolean}\n     */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        const ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    keys() {\n        const ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/** */\nclass Mint {\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Mint}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Mint}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.mint_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Mint}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {Mint}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = wasm.mint_new_from_entry(key.ptr, value.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {MintAssets | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @returns {MintAssets | undefined}\n     */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        const ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        const ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only positive (minting) entries are present\n     * @returns {MultiAsset}\n     */\n    as_positive_multiasset() {\n        const ret = wasm.mint_as_positive_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only negative (burning) entries are present\n     * @returns {MultiAsset}\n     */\n    as_negative_multiasset() {\n        const ret = wasm.mint_as_negative_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nclass MintAssets {\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n     * @returns {MintAssets}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {MintAssets}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.mintassets_new_from_entry(key.ptr, ptr0);\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {Int | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {Int | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        const ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nclass MoveInstantaneousReward {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousreward_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousreward_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} pot\n     * @param {BigNum} amount\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        const ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {MIRToStakeCredentials} amounts\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        const ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    pot() {\n        const ret = wasm.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_to_other_pot() {\n        const ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials | undefined}\n     */\n    as_to_stake_creds() {\n        const ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/** */\nclass MoveInstantaneousRewardsCert {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousrewardscert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.moveinstantaneousrewardscert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MoveInstantaneousReward}\n     */\n    move_instantaneous_reward() {\n        const ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousReward} move_instantaneous_reward\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        const ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nclass MultiAsset {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiAsset}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multiasset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiAsset}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multiasset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MultiAsset}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * the number of unique policy IDs in the multiasset\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n     * @param {ScriptHash} policy_id\n     * @param {Assets} assets\n     * @returns {Assets | undefined}\n     */\n    insert(policy_id, assets) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(assets, Assets);\n        const ret = wasm.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @returns {Assets | undefined}\n     */\n    get(policy_id) {\n        _assertClass(policy_id, ScriptHash);\n        const ret = wasm.multiasset_get(this.ptr, policy_id.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * sets the asset {asset_name} to {value} under policy {policy_id}\n     * returns the previous amount if it was set, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    set_asset(policy_id, asset_name, value) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        _assertClass(value, BigNum);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * returns the amount of asset {asset_name} under policy {policy_id}\n     * If such an asset does not exist, 0 is returned.\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @returns {BigNum}\n     */\n    get_asset(policy_id, asset_name) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        const ret = wasm.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns all policy IDs used by assets in this multiasset\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        const ret = wasm.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * removes an asset from the list if the result is 0 or less\n     * does not modify this object, instead the result is returned\n     * @param {MultiAsset} rhs_ma\n     * @returns {MultiAsset}\n     */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        const ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nclass MultiHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiHostName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multihostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiHostName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.multihostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {DNSRecordSRV}\n     */\n    dns_name() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {DNSRecordSRV} dns_name\n     * @returns {MultiHostName}\n     */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        const ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/** */\nclass NativeScript {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NativeScript}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nativescript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {NativeScript}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nativescript_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        const ret = wasm.nativescript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptPubkey} script_pubkey\n     * @returns {NativeScript}\n     */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        const ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAll} script_all\n     * @returns {NativeScript}\n     */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        const ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAny} script_any\n     * @returns {NativeScript}\n     */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        const ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptNOfK} script_n_of_k\n     * @returns {NativeScript}\n     */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        const ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockStart} timelock_start\n     * @returns {NativeScript}\n     */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        const ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockExpiry} timelock_expiry\n     * @returns {NativeScript}\n     */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        const ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ScriptPubkey | undefined}\n     */\n    as_script_pubkey() {\n        const ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAll | undefined}\n     */\n    as_script_all() {\n        const ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAny | undefined}\n     */\n    as_script_any() {\n        const ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptNOfK | undefined}\n     */\n    as_script_n_of_k() {\n        const ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockStart | undefined}\n     */\n    as_timelock_start() {\n        const ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockExpiry | undefined}\n     */\n    as_timelock_expiry() {\n        const ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * Returns an array of unique Ed25519KeyHashes\n     * contained within this script recursively on any depth level.\n     * The order of the keys in the result is not determined in any way.\n     * @returns {Ed25519KeyHashes}\n     */\n    get_required_signers() {\n        const ret = wasm.nativescript_get_required_signers(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {BigNum | undefined} lower_bound\n     * @param {BigNum | undefined} upper_bound\n     * @param {Ed25519KeyHashes} key_hashes\n     * @returns {boolean}\n     */\n    verify(lower_bound, upper_bound, key_hashes) {\n        let ptr0 = 0;\n        if (!isLikeNone(lower_bound)) {\n            _assertClass(lower_bound, BigNum);\n            ptr0 = lower_bound.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(upper_bound)) {\n            _assertClass(upper_bound, BigNum);\n            ptr1 = upper_bound.__destroy_into_raw();\n        }\n        _assertClass(key_hashes, Ed25519KeyHashes);\n        const ret = wasm.nativescript_verify(this.ptr, ptr0, ptr1, key_hashes.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nclass NativeScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {NativeScript}\n     */\n    get(index) {\n        const ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass NetworkId {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NetworkId}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.networkid_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {NetworkId}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.networkid_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static testnet() {\n        const ret = wasm.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static mainnet() {\n        const ret = wasm.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nclass NetworkInfo {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n     * @param {number} network_id\n     * @param {number} protocol_magic\n     * @returns {NetworkInfo}\n     */\n    static new(network_id, protocol_magic) {\n        const ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        const ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    protocol_magic() {\n        const ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static testnet() {\n        const ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static mainnet() {\n        const ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/** */\nclass Nonce {\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Nonce}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nonce_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Nonce}\n     */\n    static new_identity() {\n        const ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} hash\n     * @returns {Nonce}\n     */\n    static new_from_hash(hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.nonce_new_from_hash(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get_hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass OperationalCert {\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {OperationalCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.operationalcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {OperationalCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.operationalcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {KESVKey}\n     */\n    hot_vkey() {\n        const ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    sequence_number() {\n        const ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kes_period() {\n        const ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    sigma() {\n        const ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {KESVKey} hot_vkey\n     * @param {number} sequence_number\n     * @param {number} kes_period\n     * @param {Ed25519Signature} sigma\n     * @returns {OperationalCert}\n     */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        const ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/** */\nclass PlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusData.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ConstrPlutusData} constr_plutus_data\n     * @returns {PlutusData}\n     */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        const ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusMap} map\n     * @returns {PlutusData}\n     */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        const ret = wasm.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} list\n     * @returns {PlutusData}\n     */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        const ret = wasm.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {BigInt} integer\n     * @returns {PlutusData}\n     */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        const ret = wasm.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static new_bytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ConstrPlutusData | undefined}\n     */\n    as_constr_plutus_data() {\n        const ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap | undefined}\n     */\n    as_map() {\n        const ret = wasm.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    as_list() {\n        const ret = wasm.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {BigInt | undefined}\n     */\n    as_integer() {\n        const ret = wasm.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass PlutusList {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusList}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutuslist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    static new() {\n        const ret = wasm.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusData}\n     */\n    get(index) {\n        const ret = wasm.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass PlutusMap {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusMap}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusmap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusMap}\n     */\n    static new() {\n        const ret = wasm.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {PlutusData} key\n     * @param {PlutusData} value\n     * @returns {PlutusData | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        const ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} key\n     * @returns {PlutusData | undefined}\n     */\n    get(key) {\n        _assertClass(key, PlutusData);\n        const ret = wasm.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    keys() {\n        const ret = wasm.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/** */\nclass PlutusScript {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusscript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        const ret = wasm.plutusscript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n     *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n     *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static new(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     *     * The raw bytes of this compiled Plutus script.\n     *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n     *\n     * @returns {Uint8Array}\n     */\n    bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass PlutusScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScripts}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.plutusscripts_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScripts.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PlutusScripts}\n     */\n    static new() {\n        const ret = wasm.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusScript}\n     */\n    get(index) {\n        const ret = wasm.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        wasm.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass PlutusWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n     * Plutus V1 witness or witness where no script is attached and so version doesn't matter\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.__destroy_into_raw();\n        }\n        const ret = wasm.plutuswitness_new(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new_plutus_v2(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.__destroy_into_raw();\n        }\n        const ret = wasm.plutuswitness_new_plutus_v2(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData | undefined}\n     */\n    plutus_data() {\n        const ret = wasm.plutuswitness_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    redeemer() {\n        const ret = wasm.plutuswitness_redeemer(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    script() {\n        const ret = wasm.plutuswitness_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    version() {\n        const ret = wasm.plutuswitness_version(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nclass Pointer {\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n     * @param {BigNum} slot\n     * @param {BigNum} tx_index\n     * @param {BigNum} cert_index\n     * @returns {Pointer}\n     */\n    static new(slot, tx_index, cert_index) {\n        _assertClass(slot, BigNum);\n        _assertClass(tx_index, BigNum);\n        _assertClass(cert_index, BigNum);\n        const ret = wasm.pointer_new(slot.ptr, tx_index.ptr, cert_index.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.pointer_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tx_index() {\n        const ret = wasm.pointer_tx_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cert_index() {\n        const ret = wasm.pointer_cert_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nclass PointerAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {Pointer} stake\n     * @returns {PointerAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        const ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Pointer}\n     */\n    stake_pointer() {\n        const ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {PointerAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_pointer(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/** */\nclass PoolMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadata}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolMetadata}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {URL}\n     */\n    url() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadataHash}\n     */\n    pool_metadata_hash() {\n        const ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @param {URL} url\n     * @param {PoolMetadataHash} pool_metadata_hash\n     * @returns {PoolMetadata}\n     */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        const ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/** */\nclass PoolMetadataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {PoolMetadataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {PoolMetadataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass PoolParams {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolParams}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolparams_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolParams}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolparams_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    operator() {\n        const ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        const ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    pledge() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cost() {\n        const ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    margin() {\n        const ret = wasm.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress}\n     */\n    reward_account() {\n        const ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    pool_owners() {\n        const ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    relays() {\n        const ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadata | undefined}\n     */\n    pool_metadata() {\n        const ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} operator\n     * @param {VRFKeyHash} vrf_keyhash\n     * @param {BigNum} pledge\n     * @param {BigNum} cost\n     * @param {UnitInterval} margin\n     * @param {RewardAddress} reward_account\n     * @param {Ed25519KeyHashes} pool_owners\n     * @param {Relays} relays\n     * @param {PoolMetadata | undefined} pool_metadata\n     * @returns {PoolParams}\n     */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.__destroy_into_raw();\n        }\n        const ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/** */\nclass PoolRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRegistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRegistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PoolParams}\n     */\n    pool_params() {\n        const ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @param {PoolParams} pool_params\n     * @returns {PoolRegistration}\n     */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        const ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @param {boolean} update\n     */\n    set_is_update(update) {\n        wasm.poolregistration_set_is_update(this.ptr, update);\n    }\n}\n/** */\nclass PoolRetirement {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRetirement}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolretirement_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRetirement}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.poolretirement_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        const ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        const ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @param {number} epoch\n     * @returns {PoolRetirement}\n     */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/** */\nclass PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_public() {\n        const ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_generate_ed25519(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519extended() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_generate_ed25519extended(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Get private key from its bech32 representation\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n     * ```\n     * For an extended 25519 key\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_extended_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_extended_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_normal_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_normal_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Ed25519Signature}\n     */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass ProposedProtocolParameterUpdates {\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proposedprotocolparameterupdates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.proposedprotocolparameterupdates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static new() {\n        const ret = wasm.auxiliarydataset_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {GenesisHash} key\n     * @param {ProtocolParamUpdate} value\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        const ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} key\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        const ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    keys() {\n        const ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/** */\nclass ProtocolParamUpdate {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolparamupdate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolparamupdate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} minfee_a\n     */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_a() {\n        const ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_b\n     */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_b() {\n        const ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_block_body_size\n     */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_body_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_tx_size\n     */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_tx_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_block_header_size\n     */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_header_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} key_deposit\n     */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    key_deposit() {\n        const ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    pool_deposit() {\n        const ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_epoch\n     */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_epoch() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} n_opt\n     */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    n_opt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {UnitInterval} pool_pledge_influence\n     */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    pool_pledge_influence() {\n        const ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} expansion_rate\n     */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    expansion_rate() {\n        const ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} treasury_growth_rate\n     */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    treasury_growth_rate() {\n        const ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} d\n     */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    d() {\n        const ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {Nonce} extra_entropy\n     */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n     * @returns {Nonce | undefined}\n     */\n    extra_entropy() {\n        const ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n     * @param {ProtocolVersion} protocol_version\n     */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersion);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n     * @returns {ProtocolVersion | undefined}\n     */\n    protocol_version() {\n        const ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} min_pool_cost\n     */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    min_pool_cost() {\n        const ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ada_per_utxo_byte\n     */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ada_per_utxo_byte() {\n        const ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} cost_models\n     */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n     * @returns {Costmdls | undefined}\n     */\n    cost_models() {\n        const ret = wasm.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} execution_costs\n     */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n     * @returns {ExUnitPrices | undefined}\n     */\n    execution_costs() {\n        const ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_tx_ex_units() {\n        const ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_block_ex_units\n     */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_block_ex_units() {\n        const ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     */\n    set_max_value_size(max_value_size) {\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_value_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} collateral_percentage\n     */\n    set_collateral_percentage(collateral_percentage) {\n        wasm.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    collateral_percentage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     */\n    set_max_collateral_inputs(max_collateral_inputs) {\n        wasm.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_collateral_inputs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtocolParamUpdate}\n     */\n    static new() {\n        const ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/** */\nclass ProtocolVersion {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolVersion}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolversion_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolVersion}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.protocolversion_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    major() {\n        const ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    minor() {\n        const ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} major\n     * @param {number} minor\n     * @returns {ProtocolVersion}\n     */\n    static new(major, minor) {\n        const ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n * ED25519 key used as public key\n */\nclass PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n     * Get public key from its bech32 representation\n     * Example:\n     * ```javascript\n     * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PublicKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {Ed25519Signature} signature\n     * @returns {boolean}\n     */\n    verify(data, signature) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    hash() {\n        const ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/** */\nclass PublicKeys {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /** */\n    constructor() {\n        const ret = wasm.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    size() {\n        const ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PublicKey}\n     */\n    get(index) {\n        const ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} key\n     */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/** */\nclass Redeemer {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemer}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemer_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemer.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        const ret = wasm.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    data() {\n        const ret = wasm.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {ExUnits}\n     */\n    ex_units() {\n        const ret = wasm.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @param {PlutusData} data\n     * @param {ExUnits} ex_units\n     * @returns {Redeemer}\n     */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        const ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/** */\nclass RedeemerTag {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RedeemerTag}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemertag_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RedeemerTag.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_spend() {\n        const ret = wasm.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_mint() {\n        const ret = wasm.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_cert() {\n        const ret = wasm.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_reward() {\n        const ret = wasm.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nclass RedeemerWitnessKey {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerWitnessKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemerwitnesskey_free(ptr);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        const ret = wasm.redeemerwitnesskey_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.pointer_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @returns {RedeemerWitnessKey}\n     */\n    static new(tag, index) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        const ret = wasm.redeemerwitnesskey_new(tag.ptr, index.ptr);\n        return RedeemerWitnessKey.__wrap(ret);\n    }\n}\n/** */\nclass Redeemers {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemers}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.redeemers_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Redeemers}\n     */\n    static new() {\n        const ret = wasm.plutusmap_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Redeemer}\n     */\n    get(index) {\n        const ret = wasm.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @param {Redeemer} elem\n     */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Relay {\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relay}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relay_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Relay}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relay_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {SingleHostAddr} single_host_addr\n     * @returns {Relay}\n     */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        const ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostName} single_host_name\n     * @returns {Relay}\n     */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        const ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {MultiHostName} multi_host_name\n     * @returns {Relay}\n     */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        const ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {SingleHostAddr | undefined}\n     */\n    as_single_host_addr() {\n        const ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {SingleHostName | undefined}\n     */\n    as_single_host_name() {\n        const ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {MultiHostName | undefined}\n     */\n    as_multi_host_name() {\n        const ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/** */\nclass Relays {\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relays}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relays_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Relays}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.relays_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Relays}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Relay}\n     */\n    get(index) {\n        const ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {Relay} elem\n     */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass RequiredWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(RequiredWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_requiredwitnessset_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Vkey} vkey\n     */\n    add_vkey_key(vkey) {\n        _assertClass(vkey, Vkey);\n        wasm.requiredwitnessset_add_vkey_key(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_vkey_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_vkey_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.requiredwitnessset_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Vkey} bootstrap\n     */\n    add_bootstrap_key(bootstrap) {\n        _assertClass(bootstrap, Vkey);\n        wasm.requiredwitnessset_add_bootstrap_key(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_bootstrap_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_bootstrap_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.requiredwitnessset_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} native_script\n     */\n    add_native_script_hash(native_script) {\n        _assertClass(native_script, ScriptHash);\n        wasm.requiredwitnessset_add_native_script_hash(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} plutus_script\n     */\n    add_plutus_hash(plutus_script) {\n        _assertClass(plutus_script, ScriptHash);\n        wasm.requiredwitnessset_add_plutus_hash(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.requiredwitnessset_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {DataHash} plutus_datum\n     */\n    add_plutus_datum_hash(plutus_datum) {\n        _assertClass(plutus_datum, DataHash);\n        wasm.requiredwitnessset_add_plutus_datum_hash(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.requiredwitnessset_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RedeemerWitnessKey} redeemer\n     */\n    add_redeemer_tag(redeemer) {\n        _assertClass(redeemer, RedeemerWitnessKey);\n        wasm.requiredwitnessset_add_redeemer_tag(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} requirements\n     */\n    add_all(requirements) {\n        _assertClass(requirements, RequiredWitnessSet);\n        wasm.requiredwitnessset_add_all(this.ptr, requirements.ptr);\n    }\n    /**\n     * @returns {RequiredWitnessSet}\n     */\n    static new() {\n        const ret = wasm.requiredwitnessset_new();\n        return RequiredWitnessSet.__wrap(ret);\n    }\n}\n/** */\nclass RewardAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {RewardAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        const ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        const ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {RewardAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = wasm.address_as_reward(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/** */\nclass RewardAddresses {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RewardAddresses}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardaddresses_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {RewardAddresses}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.rewardaddresses_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {RewardAddress}\n     */\n    get(index) {\n        const ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} elem\n     */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Script {\n    static __wrap(ptr) {\n        const obj = Object.create(Script.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_script_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Script}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.script_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Script.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Script}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.script_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Script.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {Script}\n     */\n    static new_native(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = wasm.script_new_native(native_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v1(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        const ret = wasm.script_new_plutus_v1(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v2(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        const ret = wasm.script_new_plutus_v2(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.script_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native() {\n        const ret = wasm.script_as_native(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v1() {\n        const ret = wasm.script_as_plutus_v1(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v2() {\n        const ret = wasm.script_as_plutus_v2(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n}\n/** */\nclass ScriptAll {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAll}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptall_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAll}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptall_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAll}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/** */\nclass ScriptAny {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAny}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptany_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAny}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptany_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAny}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/** */\nclass ScriptDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptDataHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptDataHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptDataHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass ScriptHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass ScriptHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHashes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptHashes}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scripthashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {ScriptHash}\n     */\n    get(index) {\n        const ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass ScriptNOfK {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptNOfK}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptnofk_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptNOfK}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptnofk_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    n() {\n        const ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        const ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {number} n\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptNOfK}\n     */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/** */\nclass ScriptPubkey {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptPubkey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptpubkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptPubkey}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptpubkey_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    addr_keyhash() {\n        const ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} addr_keyhash\n     * @returns {ScriptPubkey}\n     */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        const ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/** */\nclass ScriptRef {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptRef.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptref_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptRef}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptref_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptRef}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptref_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Script} script\n     * @returns {ScriptRef}\n     */\n    static new(script) {\n        _assertClass(script, Script);\n        const ret = wasm.scriptref_new(script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {Script}\n     */\n    get() {\n        const ret = wasm.scriptref_get(this.ptr);\n        return Script.__wrap(ret);\n    }\n}\n/** */\nclass ScriptWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptwitness_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptWitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.scriptwitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptWitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {ScriptWitness}\n     */\n    static new_native_witness(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = wasm.scriptwitness_new_native_witness(native_script.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusWitness} plutus_witness\n     * @returns {ScriptWitness}\n     */\n    static new_plutus_witness(plutus_witness) {\n        _assertClass(plutus_witness, PlutusWitness);\n        const ret = wasm.scriptwitness_new_plutus_witness(plutus_witness.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.scriptwitness_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native_witness() {\n        const ret = wasm.scriptwitness_as_native_witness(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusWitness | undefined}\n     */\n    as_plutus_witness() {\n        const ret = wasm.scriptwitness_as_plutus_witness(this.ptr);\n        return ret === 0 ? undefined : PlutusWitness.__wrap(ret);\n    }\n}\n/** */\nclass SingleHostAddr {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostAddr}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostaddr_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostAddr}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostaddr_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        const ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {Ipv4 | undefined}\n     */\n    ipv4() {\n        const ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Ipv6 | undefined}\n     */\n    ipv6() {\n        const ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {Ipv4 | undefined} ipv4\n     * @param {Ipv6 | undefined} ipv6\n     * @returns {SingleHostAddr}\n     */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.__destroy_into_raw();\n        }\n        const ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/** */\nclass SingleHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostName}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostName}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.singlehostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        const ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {DNSRecordAorAAAA}\n     */\n    dns_name() {\n        const ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {DNSRecordAorAAAA} dns_name\n     * @returns {SingleHostName}\n     */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        const ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/** */\nclass StakeCredential {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        const ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        const ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash | undefined}\n     */\n    to_keyhash() {\n        const ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHash | undefined}\n     */\n    to_scripthash() {\n        const ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.stakecredential_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredential}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredential_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredential}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredential_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass StakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredentials}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredentials}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    static new() {\n        const ret = wasm.ed25519keyhashes_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {StakeCredential}\n     */\n    get(index) {\n        const ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} elem\n     */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass StakeDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDelegation}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakedelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDelegation}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakedelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        const ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @returns {StakeDelegation}\n     */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/** */\nclass StakeDeregistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDeregistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakederegistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDeregistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakederegistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeDeregistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/** */\nclass StakeRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeRegistration}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakeregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeRegistration}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.stakeregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        const ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeRegistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/** */\nclass Strings {\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_strings_free(ptr);\n    }\n    /**\n     * @returns {Strings}\n     */\n    static new() {\n        const ret = wasm.plutusscripts_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {string}\n     */\n    get(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} elem\n     */\n    add(elem) {\n        const ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/** */\nclass TimelockExpiry {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockExpiry}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockexpiry_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockExpiry}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockexpiry_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockExpiry}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        const ret = wasm.timelockexpiry_new(slot.ptr);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/** */\nclass TimelockStart {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockStart}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockstart_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockStart}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timelockstart_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockStart}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        const ret = wasm.timelockexpiry_new(slot.ptr);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/** */\nclass Transaction {\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Transaction}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Transaction}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionBody}\n     */\n    body() {\n        const ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    witness_set() {\n        const ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_valid() {\n        const ret = wasm.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        const ret = wasm.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {boolean} valid\n     */\n    set_is_valid(valid) {\n        wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n     * @param {TransactionBody} body\n     * @param {TransactionWitnessSet} witness_set\n     * @param {AuxiliaryData | undefined} auxiliary_data\n     * @returns {Transaction}\n     */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.__destroy_into_raw();\n        }\n        const ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/** */\nclass TransactionBodies {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBodies}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbodies_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBodies}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbodies_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionBody}\n     */\n    get(index) {\n        const ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @param {TransactionBody} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass TransactionBody {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBody}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBody}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    inputs() {\n        const ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        const ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    fee() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ttl() {\n        const ret = wasm.transactionbody_ttl(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Certificates} certs\n     */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certs() {\n        const ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @param {Withdrawals} withdrawals\n     */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        const ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * @param {Update} update\n     */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n     * @returns {Update | undefined}\n     */\n    update() {\n        const ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n     * @param {AuxiliaryDataHash} auxiliary_data_hash\n     */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataHash | undefined}\n     */\n    auxiliary_data_hash() {\n        const ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    validity_start_interval() {\n        const ret = wasm.transactionbody_validity_start_interval(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Mint} mint\n     */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        const ret = wasm.transactionbody_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptDataHash} script_data_hash\n     */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        const ret = wasm.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} collateral\n     */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    collateral() {\n        const ret = wasm.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHashes} required_signers\n     */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        const ret = wasm.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        const ret = wasm.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} collateral_return\n     */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        wasm.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n     * @returns {TransactionOutput | undefined}\n     */\n    collateral_return() {\n        const ret = wasm.transactionbody_collateral_return(this.ptr);\n        return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} total_collateral\n     */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        wasm.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    total_collateral() {\n        const ret = wasm.transactionbody_total_collateral(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} reference_inputs\n     */\n    set_reference_inputs(reference_inputs) {\n        _assertClass(reference_inputs, TransactionInputs);\n        wasm.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    reference_inputs() {\n        const ret = wasm.transactionbody_reference_inputs(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} inputs\n     * @param {TransactionOutputs} outputs\n     * @param {BigNum} fee\n     * @param {BigNum | undefined} ttl\n     * @returns {TransactionBody}\n     */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(ttl)) {\n            _assertClass(ttl, BigNum);\n            ptr0 = ttl.__destroy_into_raw();\n        }\n        const ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, ptr0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    raw() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_raw(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n     * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n     * the outputs that have already been added.\n     * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n     * Adding a change output must be called after via TransactionBuilder::balance()\n     * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n     *\n     * change_address is required here in order to determine the min ada requirement precisely\n     * @param {TransactionUnspentOutputs} inputs\n     * @param {Address} change_address\n     */\n    add_inputs_from(inputs, change_address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(inputs, TransactionUnspentOutputs);\n            _assertClass(change_address, Address);\n            wasm.transactionbuilder_add_inputs_from(retptr, this.ptr, inputs.ptr, change_address.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_input(utxo, script_witness) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_input(this.ptr, utxo.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_reference_input(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_reference_input(this.ptr, utxo.ptr);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {Address} address\n     * @param {TransactionInput} input\n     * @param {Value} amount\n     * @returns {BigNum}\n     */\n    fee_for_input(address, input, amount) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(address, Address);\n            _assertClass(input, TransactionInput);\n            _assertClass(amount, Value);\n            wasm.transactionbuilder_fee_for_input(retptr, this.ptr, address.ptr, input.ptr, amount.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add explicit output via a TransactionOutput object\n     * @param {TransactionOutput} output\n     */\n    add_output(output) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            wasm.transactionbuilder_add_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add plutus scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus v2 scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus data via a PlutusData object\n     * @param {PlutusData} plutus_data\n     */\n    add_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        wasm.transactionbuilder_add_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * Add native scripts via a NativeScripts object\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * Add certificate via a Certificates object\n     * @param {Certificate} certificate\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_certificate(certificate, script_witness) {\n        _assertClass(certificate, Certificate);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_certificate(this.ptr, certificate.ptr, ptr0);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {TransactionOutput} output\n     * @returns {BigNum}\n     */\n    fee_for_output(output) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            wasm.transactionbuilder_fee_for_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} ttl\n     */\n    set_ttl(ttl) {\n        _assertClass(ttl, BigNum);\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @param {RewardAddress} reward_address\n     * @param {BigNum} coin\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_withdrawal(reward_address, coin, script_witness) {\n        _assertClass(reward_address, RewardAddress);\n        _assertClass(coin, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_withdrawal(this.ptr, reward_address.ptr, coin.ptr, ptr0);\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        const ret = wasm.transactionbuilder_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * Set explicit auxiliary data via an AuxiliaryData object\n     * It might contain some metadata plus native or Plutus scripts\n     * @param {AuxiliaryData} auxiliary_data\n     */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n     * Set metadata using a GeneralTransactionMetadata object\n     * It will be set to the existing or new auxiliary data in this builder\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} val\n     */\n    add_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        _assertClass(val, TransactionMetadatum);\n        wasm.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     */\n    add_json_metadatum(key, val) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbuilder_add_json_metadatum(retptr, this.ptr, key.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     * @param {number} schema\n     */\n    add_json_metadatum_with_schema(key, val, schema) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionbuilder_add_json_metadatum_with_schema(retptr, this.ptr, key.ptr, ptr0, len0, schema);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns a copy of the current mint state in the builder\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        const ret = wasm.transactionbuilder_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certificates() {\n        const ret = wasm.transactionbuilder_certificates(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        const ret = wasm.transactionbuilder_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * Returns a copy of the current witness native scripts in the builder\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.transactionbuilder_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * Add a mint entry to this builder using a PolicyID and MintAssets object\n     * It will be securely added to existing or new Mint in this builder\n     * It will securely add assets to an existing PolicyID\n     * But it will replace/overwrite any existing mint assets with the same PolicyID\n     * first redeemer applied to a PolicyID is taken for all further assets added to the same PolicyID\n     * @param {ScriptHash} policy_id\n     * @param {MintAssets} mint_assets\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_mint(policy_id, mint_assets, script_witness) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(mint_assets, MintAssets);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.__destroy_into_raw();\n        }\n        wasm.transactionbuilder_add_mint(this.ptr, policy_id.ptr, mint_assets.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionBuilderConfig} cfg\n     * @returns {TransactionBuilder}\n     */\n    static new(cfg) {\n        _assertClass(cfg, TransactionBuilderConfig);\n        const ret = wasm.transactionbuilder_new(cfg.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        const ret = wasm.transactionbuilder_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_collateral(utxo) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(utxo, TransactionUnspentOutput);\n            wasm.transactionbuilder_add_collateral(retptr, this.ptr, utxo.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    get_collateral() {\n        const ret = wasm.transactionbuilder_get_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} required_signer\n     */\n    add_required_signer(required_signer) {\n        _assertClass(required_signer, Ed25519KeyHash);\n        wasm.transactionbuilder_add_required_signer(this.ptr, required_signer.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        const ret = wasm.transactionbuilder_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        var ptr0 = network_id.__destroy_into_raw();\n        wasm.transactionbuilder_set_network_id(this.ptr, ptr0);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        const ret = wasm.transactionbuilder_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        const ret = wasm.transactionbuilder_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * does not include refunds or withdrawals\n     * @returns {Value}\n     */\n    get_explicit_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_explicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * withdrawals and refunds\n     * @returns {Value}\n     */\n    get_implicit_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_implicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Return explicit input plus implicit input plus mint\n     * @returns {Value}\n     */\n    get_total_input() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_total_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Return explicit output plus implicit output plus burn (does not consider fee directly)\n     * @returns {Value}\n     */\n    get_total_output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_total_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * does not include fee\n     * @returns {Value}\n     */\n    get_explicit_output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_explicit_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    get_deposit() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_get_deposit(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    get_fee_if_set() {\n        const ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * Warning: this function will mutate the /fee/ field\n     * Make sure to call this function last after setting all other tx-body properties\n     * Editing inputs, outputs, mint, etc. after change been calculated\n     * might cause a mismatch in calculated fee versus the required fee\n     * @param {Address} change_address\n     * @param {Datum | undefined} datum\n     */\n    balance(change_address, datum) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(change_address, Address);\n            let ptr0 = 0;\n            if (!isLikeNone(datum)) {\n                _assertClass(datum, Datum);\n                ptr0 = datum.__destroy_into_raw();\n            }\n            wasm.transactionbuilder_balance(retptr, this.ptr, change_address.ptr, ptr0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the TransactionBody.\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    full_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_full_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint32Array}\n     */\n    output_sizes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        const ret = wasm.transactionbuilder_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     *\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     *\n     * takes fetched ex units into consideration\n     *\n     * add collateral utxos and collateral change receiver in case you redeem from plutus script utxos\n     *\n     * async call\n     *\n     * NOTE: is_valid set to true\n     * @param {TransactionUnspentOutputs | undefined} collateral_utxos\n     * @param {Address | undefined} collateral_change_address\n     * @param {boolean | undefined} native_uplc\n     * @returns {Promise<Transaction>}\n     */\n    construct(collateral_utxos, collateral_change_address, native_uplc) {\n        const ptr = this.__destroy_into_raw();\n        let ptr0 = 0;\n        if (!isLikeNone(collateral_utxos)) {\n            _assertClass(collateral_utxos, TransactionUnspentOutputs);\n            ptr0 = collateral_utxos.__destroy_into_raw();\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(collateral_change_address)) {\n            _assertClass(collateral_change_address, Address);\n            ptr1 = collateral_change_address.__destroy_into_raw();\n        }\n        const ret = wasm.transactionbuilder_construct(ptr, ptr0, ptr1, isLikeNone(native_uplc) ? 0xFFFFFF : native_uplc ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     * NOTE: is_valid set to true\n     * @returns {Transaction}\n     */\n    build_tx() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_build_tx(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n     * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n     * this is done to simplify the library code, but can be fixed later\n     * @returns {BigNum}\n     */\n    min_fee() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_min_fee(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionBuilderConfig {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfig.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfig_free(ptr);\n    }\n}\n/** */\nclass TransactionBuilderConfigBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionbuilderconfigbuilder_new();\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {LinearFee} fee_algo\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    fee_algo(fee_algo) {\n        _assertClass(fee_algo, LinearFee);\n        const ret = wasm.transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coins_per_utxo_byte\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    coins_per_utxo_byte(coins_per_utxo_byte) {\n        _assertClass(coins_per_utxo_byte, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_value_size(max_value_size) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_tx_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_size(max_tx_size) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} ex_unit_prices\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    ex_unit_prices(ex_unit_prices) {\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        const ret = wasm.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        const ret = wasm.transactionbuilderconfigbuilder_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} costmdls\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    costmdls(costmdls) {\n        _assertClass(costmdls, Costmdls);\n        const ret = wasm.transactionbuilderconfigbuilder_costmdls(this.ptr, costmdls.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} collateral_percentage\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    collateral_percentage(collateral_percentage) {\n        const ret = wasm.transactionbuilderconfigbuilder_collateral_percentage(this.ptr, collateral_percentage);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_collateral_inputs(max_collateral_inputs) {\n        const ret = wasm.transactionbuilderconfigbuilder_max_collateral_inputs(this.ptr, max_collateral_inputs);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} zero_time\n     * @param {BigNum} zero_slot\n     * @param {number} slot_length\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    slot_config(zero_time, zero_slot, slot_length) {\n        _assertClass(zero_time, BigNum);\n        _assertClass(zero_slot, BigNum);\n        const ret = wasm.transactionbuilderconfigbuilder_slot_config(this.ptr, zero_time.ptr, zero_slot.ptr, slot_length);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Blockfrost} blockfrost\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    blockfrost(blockfrost) {\n        _assertClass(blockfrost, Blockfrost);\n        const ret = wasm.transactionbuilderconfigbuilder_blockfrost(this.ptr, blockfrost.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBuilderConfig}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilderconfigbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBuilderConfig.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionHash {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {TransactionHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {TransactionHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionIndexes {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionIndexes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionindexes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionindexes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionIndexes}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionindexes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionIndexes.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        const ret = wasm.transactionindexes_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass TransactionInput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInput}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionHash}\n     */\n    transaction_id() {\n        const ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionHash} transaction_id\n     * @param {BigNum} index\n     * @returns {TransactionInput}\n     */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        _assertClass(index, BigNum);\n        const ret = wasm.transactioninput_new(transaction_id.ptr, index.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/** */\nclass TransactionInputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInputs}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInputs}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactioninputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionInput}\n     */\n    get(index) {\n        const ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n    /** */\n    sort() {\n        wasm.transactioninputs_sort(this.ptr);\n    }\n}\n/** */\nclass TransactionMetadatum {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {MetadataMap} map\n     * @returns {TransactionMetadatum}\n     */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        const ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataList} list\n     * @returns {TransactionMetadatum}\n     */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        const ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {TransactionMetadatum}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        const ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static new_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_new_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} text\n     * @returns {TransactionMetadatum}\n     */\n    static new_text(text) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatum_new_text(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        const ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    as_map() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_map(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    as_list() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_list(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Int}\n     */\n    as_int() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_int(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n}\n/** */\nclass TransactionMetadatumLabels {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatumLabels}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionmetadatumlabels_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatumLabels.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    static new() {\n        const ret = wasm.metadatalist_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        const ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass TransactionOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutput}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Address}\n     */\n    address() {\n        const ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    amount() {\n        const ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Datum | undefined}\n     */\n    datum() {\n        const ret = wasm.transactionoutput_datum(this.ptr);\n        return ret === 0 ? undefined : Datum.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptRef | undefined}\n     */\n    script_ref() {\n        const ret = wasm.transactionoutput_script_ref(this.ptr);\n        return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Datum} datum\n     */\n    set_datum(datum) {\n        _assertClass(datum, Datum);\n        wasm.transactionoutput_set_datum(this.ptr, datum.ptr);\n    }\n    /**\n     * @param {ScriptRef} script_ref\n     */\n    set_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        wasm.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n     * @param {Address} address\n     * @param {Value} amount\n     * @returns {TransactionOutput}\n     */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        const ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * legacy support: serialize output as array array\n     *\n     * does not support inline datum and script_ref!\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionOutputAmountBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputAmountBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n     * @param {Value} amount\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_value(amount) {\n        _assertClass(amount, Value);\n        const ret = wasm.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin(coin) {\n        _assertClass(coin, BigNum);\n        const ret = wasm.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @param {MultiAsset} multiasset\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin_and_asset(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        const ret = wasm.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @param {BigNum} coins_per_utxo_word\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(multiasset, MultiAsset);\n            _assertClass(coins_per_utxo_word, BigNum);\n            wasm.transactionoutputamountbuilder_with_asset_and_min_required_coin(retptr, this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputamountbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n * We introduce a builder-pattern format for creating transaction outputs\n * This is because:\n * 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n * 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n * 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n */\nclass TransactionOutputBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionOutputBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionoutputbuilder_new();\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Address} address\n     * @returns {TransactionOutputBuilder}\n     */\n    with_address(address) {\n        _assertClass(address, Address);\n        const ret = wasm.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Datum} data_hash\n     * @returns {TransactionOutputBuilder}\n     */\n    with_datum(data_hash) {\n        _assertClass(data_hash, Datum);\n        const ret = wasm.transactionoutputbuilder_with_datum(this.ptr, data_hash.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    next() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputbuilder_next(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutputs}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutputs}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionoutputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    static new() {\n        const ret = wasm.certificates_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionOutput}\n     */\n    get(index) {\n        const ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass TransactionUnspentOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionUnspentOutput}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionunspentoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutput.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {TransactionInput} input\n     * @param {TransactionOutput} output\n     * @returns {TransactionUnspentOutput}\n     */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        const ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInput}\n     */\n    input() {\n        const ret = wasm.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    output() {\n        const ret = wasm.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionUnspentOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n     * @returns {TransactionUnspentOutputs}\n     */\n    static new() {\n        const ret = wasm.transactionunspentoutputs_new();\n        return TransactionUnspentOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.transactionunspentoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionUnspentOutput}\n     */\n    get(index) {\n        const ret = wasm.transactionunspentoutputs_get(this.ptr, index);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionUnspentOutput);\n        wasm.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass TransactionWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSet}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnessset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSet}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnessset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkeywitnesses} vkeys\n     */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses | undefined}\n     */\n    vkeys() {\n        const ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        const ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitnesses} bootstraps\n     */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses | undefined}\n     */\n    bootstraps() {\n        const ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        const ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} plutus_data\n     */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    plutus_data() {\n        const ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {Redeemers} redeemers\n     */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        const ret = wasm.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_v2_scripts() {\n        const ret = wasm.transactionwitnessset_plutus_v2_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    static new() {\n        const ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n * Builder de-duplicates witnesses as they are added\n */\nclass TransactionWitnessSetBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSetBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssetbuilder_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.transactionwitnesssetbuilder_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.transactionwitnesssetbuilder_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionwitnesssetbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.transactionwitnesssetbuilder_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.transactionwitnesssetbuilder_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} required_wits\n     */\n    add_required_wits(required_wits) {\n        _assertClass(required_wits, RequiredWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_required_wits(this.ptr, required_wits.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSetBuilder}\n     */\n    static new() {\n        const ret = wasm.transactionwitnesssetbuilder_new();\n        return TransactionWitnessSetBuilder.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} wit_set\n     */\n    add_existing(wit_set) {\n        _assertClass(wit_set, TransactionWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_existing(this.ptr, wit_set.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    build() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssetbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass TransactionWitnessSets {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSets}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnesssets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSets}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transactionwitnesssets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    static new() {\n        const ret = wasm.assetnames_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionWitnessSet}\n     */\n    get(index) {\n        const ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass URL {\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {URL}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.url_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} url\n     * @returns {URL}\n     */\n    static new(url) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.url_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nclass UnitInterval {\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {UnitInterval}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unitinterval_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {UnitInterval}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unitinterval_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    numerator() {\n        const ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    denominator() {\n        const ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} numerator\n     * @param {BigNum} denominator\n     * @returns {UnitInterval}\n     */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        const ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {number} float_number\n     * @returns {UnitInterval}\n     */\n    static from_float(float_number) {\n        const ret = wasm.unitinterval_from_float(float_number);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/** */\nclass Update {\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Update}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.update_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Update}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.update_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    proposed_protocol_parameter_updates() {\n        const ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        const ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n     * @param {number} epoch\n     * @returns {Update}\n     */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        const ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/** */\nclass VRFCert {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFCert}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {VRFCert}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} output\n     * @param {Uint8Array} proof\n     * @returns {VRFCert}\n     */\n    static new(output, proof) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.vrfcert_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass VRFKeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFKeyHash}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0;\n                len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {VRFKeyHash}\n     */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {VRFKeyHash}\n     */\n    static from_hex(hex) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass VRFVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFVKey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vrfvkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFVKey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    hash() {\n        const ret = wasm.vrfvkey_hash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_raw_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nclass Value {\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Value}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.value_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Value}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.value_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {Value}\n     */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        const ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @returns {Value}\n     */\n    static new_from_assets(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        const ret = wasm.value_new_from_assets(multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    static zero() {\n        const ret = wasm.value_zero();\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        const ret = wasm.value_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coin() {\n        const ret = wasm.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n     * @returns {MultiAsset | undefined}\n     */\n    multiasset() {\n        const ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n     * @param {Value} rhs\n     * @returns {Value}\n     */\n    checked_add(rhs) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs, Value);\n            wasm.value_checked_add(retptr, this.ptr, rhs.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    checked_sub(rhs_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs_value, Value);\n            wasm.value_checked_sub(retptr, this.ptr, rhs_value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * note: values are only partially comparable\n     * @param {Value} rhs_value\n     * @returns {number | undefined}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/** */\nclass Vkey {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkey}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkey.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {PublicKey} pk\n     * @returns {Vkey}\n     */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        const ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    public_key() {\n        const ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/** */\nclass Vkeys {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n     * @returns {Vkeys}\n     */\n    static new() {\n        const ret = wasm.publickeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkey}\n     */\n    get(index) {\n        const ret = wasm.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Vkeywitness {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkeywitness}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkeywitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Vkeywitness}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.vkeywitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @returns {Vkeywitness}\n     */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        const ret = wasm.vkey_new(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        const ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/** */\nclass Vkeywitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses}\n     */\n    static new() {\n        const ret = wasm.publickeys_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkeywitness}\n     */\n    get(index) {\n        const ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nclass Withdrawals {\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Withdrawals}\n     */\n    static from_bytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.withdrawals_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0;\n                len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} json\n     * @returns {Withdrawals}\n     */\n    static from_json(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.withdrawals_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Withdrawals}\n     */\n    static new() {\n        const ret = wasm.assets_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {RewardAddress} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        const ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        const ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    keys() {\n        const ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            }\n            catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    }\n    else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n        }\n        else {\n            return instance;\n        }\n    }\n}\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_transaction_new = function (arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_parse = function (arg0, arg1) {\n        const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_serialize = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = JSON.stringify(obj === undefined ? null : obj);\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_string_get = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof (obj) === \"string\" ? obj : undefined;\n        var ptr0 = isLikeNone(ret)\n            ? 0\n            : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_fetch_16f5dddfc5a913a4 = function (arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_headers_62251deafd6006a4 = function (arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_180596d00125dea9 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_instanceof_Response_d61ff4c524b8dbc4 = function (arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        }\n        catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_json_04261ba2dfde42a6 = function () {\n        return handleError(function (arg0) {\n            const ret = getObject(arg0).json();\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function (arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d0d98c257c1ef83e = function () {\n        return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n            getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_cb_drop = function (arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_2f6909f8132a175d = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n        }, arguments);\n    };\n    imports.wbg.__wbg_getRandomValues_11a236fbf9914290 = function () {\n        return handleError(function (arg0, arg1) {\n            getObject(arg0).getRandomValues(getObject(arg1));\n        }, arguments);\n    };\n    imports.wbg.__wbg_process_5615a087a47ba544 = function (arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function (arg0) {\n        const val = getObject(arg0);\n        const ret = typeof (val) === \"object\" && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_versions_8404a8b21b9337ae = function (arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_8b504e170b6380b9 = function (arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function (arg0) {\n        const ret = typeof (getObject(arg0)) === \"string\";\n        return ret;\n    };\n    imports.wbg.__wbg_require_0430b68b38d1a77e = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_crypto_ca5197b41df5e2bd = function (arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_1088c21440b2d7e4 = function (arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_06b864c18e8ae506 = function () {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newnoargs_2b8b6bd7753c76ba = function (arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_95d1ea488d03e4e8 = function () {\n        return handleError(function (arg0, arg1) {\n            const ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_f9876326328f45ed = function () {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_e7c1f827057f6584 = function () {\n        return handleError(function () {\n            const ret = self.self;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_window_a09ec664e14b1b81 = function () {\n        return handleError(function () {\n            const ret = globalThis.window;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_globalThis_87cbb8506fecf3a9 = function () {\n        return handleError(function () {\n            const ret = globalThis.globalThis;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_global_c85a9259e621f3db = function () {\n        return handleError(function () {\n            const ret = global.global;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_is_undefined = function (arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_call_9495de66fdbe016b = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_9d3a9ce4282a18a8 = function (arg0, arg1) {\n        try {\n            var state0 = { a: arg0, b: arg1 };\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_1367(a, state0.b, arg0, arg1);\n                }\n                finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        }\n        finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_fd40f858d9db1a04 = function (arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_ec5db6d509eb475f = function (arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f753623316e2873a = function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function (arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_537b7341ce90bb31 = function (arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_17499e8aa4003ebd = function (arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_27a2afe8ab42b09f = function (arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_b56c882b57805732 = function (arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_7526649b91a252a6 = function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_6aa458a4ebdb65cb = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_d87f272aec784ec0 = function (arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_eae29933372a39be = function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function (arg0, arg1) {\n        const ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_self_e0b3266d2d9eba1a = function (arg0) {\n        const ret = getObject(arg0).self;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_crypto_e95a6e54c5c2e37f = function (arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_dc67302a7bd1aec5 = function (arg0) {\n        const ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_0993fe224bf8e202 = function (arg0, arg1) {\n        const ret = require(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dd2297de5917c74e = function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_getRandomValues_02639197c8166a96 = function (arg0, arg1, arg2) {\n        getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function () {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6400 = function (arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 259, __wbg_adapter_30);\n        return addHeapObject(ret);\n    };\n    return imports;\n}\nfunction initMemory(imports, maybe_memory) {\n}\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint32Memory0 = null;\n    cachedUint8Memory0 = null;\n    return wasm;\n}\nfunction initSync(module) {\n    const imports = getImports();\n    initMemory(imports);\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n    const instance = new WebAssembly.Instance(module, imports);\n    return finalizeInit(instance, module);\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"cardano_multiplatform_lib_bg.wasm\", \"file:///Users/nathan/Desktop/explorer/node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js\");\n    }\n    const imports = getImports();\n    if (typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)) {\n        input = fetch(input);\n    }\n    initMemory(imports);\n    const { instance, module } = await load(await input, imports);\n    return finalizeInit(instance, module);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (init);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js\n"));

/***/ })

}]);