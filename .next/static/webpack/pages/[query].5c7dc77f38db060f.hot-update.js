"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/[query]",{

/***/ "./pages/token.js":
/*!************************!*\
  !*** ./pages/token.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Token; }\n/* harmony export */ });\nconst blockfrostFetch = async (endpoint)=>{\n    const baseURL = \"https://cardano-mainnet.blockfrost.io/api/v0/\";\n    const projectId = \"mainnetoW61YYSiOoLSaNQ6dzTrkAG4azXVIrvh\";\n    const response = await fetch(baseURL + endpoint, {\n        headers: {\n            project_id: projectId,\n            \"cache-control\": \"max-age=31536000\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch data from Blockfrost API: \".concat(response.statusText));\n    }\n    return await response.json();\n};\n// if metadata has been fetched\n// find the ipfs link under 'image' metadata tag and store it\nconst getIpfsFromMetadata = (metadata)=>{\n    const keys = Object.keys(metadata);\n    const values = Object.values(metadata);\n    let ipfs = \"\";\n    for(let i = 0; i < keys.length; i++){\n        if (keys[i] == \"image\") {\n            ipfs = values[i];\n        }\n        // fungible tokens will have a 'logo' instead of 'image' tag\n        if (keys[i] == \"logo\") {\n            ipfs = \"data:image/png;base64,\" + values[i];\n        }\n    }\n    // convert all ipfs formats to the a searchable format that can be fetched in a <img> tag\n    try {\n        // links are sometimes stored in arrays\n        // this finds ipfs links in the array\n        if (Array.isArray(ipfs)) {\n            let newipfs = \"\";\n            for (const element of ipfs){\n                newipfs = newipfs + element;\n            }\n            if (newipfs.startsWith(\"ba\")) {\n                newipfs = \"http://dweb.link/ipfs/\" + ipfs;\n                newipfs = newipfs.replace(/,/g, \"\");\n            }\n            return newipfs;\n        }\n        // normal ipfs in image tags\n        if (ipfs.startsWith(\"ipfs://\")) {\n            ipfs = ipfs.slice(7);\n            if (ipfs.startsWith(\"ipfs/\")) {\n                ipfs = ipfs.slice(5);\n            }\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        } else if (ipfs.startsWith(\"ipfs/\")) {\n            ipfs = ipfs.slice(5);\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        } else if (ipfs.startsWith(\"Qm\")) {\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        }\n    } catch (e) {\n        return null;\n    }\n    return ipfs;\n};\nclass Token {\n    async fetchTokenData() {\n        try {\n            const assetId = this.policy_id + this.asset_name;\n            const [metadataRes, txsRes] = await Promise.all([\n                blockfrostFetch(\"assets/\".concat(assetId)),\n                blockfrostFetch(\"assets/\".concat(assetId, \"/transactions\"))\n            ]);\n            this.onchain_metadata = metadataRes.onchain_metadata || null;\n            this.metadata = metadataRes.metadata || null;\n            this.txs = txsRes || null;\n            this.ipfs = getIpfsFromMetadata(this.onchain_metadata || {});\n        } catch (e) {}\n    }\n    async getPrice() {\n        if (this.quantity === 1) {\n            console.log(\"Not fungible\");\n            return;\n        }\n        try {\n            var _this_metadata;\n            const request = await fetch(\"/coin-gecko.json\");\n            const geckoData = await request.json();\n            const ticker = (_this_metadata = this.metadata) === null || _this_metadata === void 0 ? void 0 : _this_metadata.ticker;\n            if (!ticker) {\n                return;\n            }\n            const foundGeckoCoin = geckoData.find((item)=>item.symbol === ticker.toLowerCase());\n            if (!foundGeckoCoin) {\n                return;\n            }\n            const req = await fetch(\"https://api.coingecko.com/api/v3/coins/\".concat(foundGeckoCoin.id));\n            const res = await req.json();\n            if (res.asset_platform_id === \"cardano\") {\n                const priceData = res.market_data;\n                this.prices = {\n                    current: priceData.current_price.usd.toFixed(2),\n                    change24h: priceData.price_change_percentage_24h.toFixed(2),\n                    change7d: priceData.price_change_percentage_7d.toFixed(2),\n                    change30d: priceData.price_change_percentage_30d.toFixed(2),\n                    change1y: priceData.price_change_percentage_1y.toFixed(2)\n                };\n            }\n        } catch (error) {\n            console.error(\"Error fetching price data:\", error);\n        }\n    }\n    constructor(asset_name, policy_id, quantity){\n        this.asset_name = asset_name;\n        this.policy_id = policy_id;\n        this.quantity = quantity;\n        this.onchain_metadata = null;\n        this.metadata = null;\n        this.txs = null;\n        this.ipfs = null;\n        this.prices = null;\n        this.image = null;\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/token.js\n"));

/***/ })

});