"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/[query]",{

/***/ "./pages/token.js":
/*!************************!*\
  !*** ./pages/token.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Token; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n// if metadata has been fetched\n// find the ipfs link under 'image' metadata tag and store it\nconst getIpfsFromMetadata = (metadata)=>{\n    const keys = Object.keys(metadata);\n    const values = Object.values(metadata);\n    let ipfs = \"\";\n    for(let i = 0; i < keys.length; i++){\n        if (keys[i] == \"image\") {\n            ipfs = values[i];\n        } else if (keys[i] == \"logo\") {\n            return \"data:image/png;base64,\" + values[i];\n        }\n    }\n    // convert all ipfs formats to the a searchable format that can be fetched in a <img> tag\n    try {\n        // links are sometimes stored in arrays\n        // this finds ipfs links in the array\n        if (Array.isArray(ipfs)) {\n            let newipfs = \"\";\n            for (const element of ipfs){\n                newipfs = newipfs + element;\n            }\n            if (newipfs.startsWith(\"ipfs://\")) {\n                newipfs = newipfs.slice(7);\n                if (newipfs.startsWith(\"ipfs/\")) {\n                    newipfs = newipfs.slice(5);\n                }\n                newipfs = \"http://dweb.link/ipfs/\" + newipfs;\n            } else if (newipfs.startsWith(\"ipfs/\")) {\n                newipfs = newipfs.slice(5);\n                newipfs = \"http://dweb.link/ipfs/\" + newipfs;\n            } else if (newipfs.startsWith(\"Qm\")) {\n                newipfs = \"http://dweb.link/ipfs/\" + newipfs;\n            }\n            return newipfs;\n        }\n        // normal ipfs in image tags\n        if (ipfs.startsWith(\"ipfs://\")) {\n            ipfs = ipfs.slice(7);\n            if (ipfs.startsWith(\"ipfs/\")) {\n                ipfs = ipfs.slice(5);\n            }\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        } else if (ipfs.startsWith(\"ipfs/\")) {\n            ipfs = ipfs.slice(5);\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        } else if (ipfs.startsWith(\"Qm\")) {\n            ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n        }\n    } catch (e) {\n        return \"/black.jpeg\";\n    }\n    if (ipfs.startsWith(\"ba\")) {\n        ipfs = \"http://dweb.link/ipfs/\" + ipfs;\n    }\n    return ipfs;\n};\nclass Token {\n    async fetchTokenMetadata() {\n        try {\n            let req = await fetch(\"https://api.koios.rest/api/v0/asset_info?_asset_policy=\" + this.policy_id + \"&_asset_name=\" + this.asset_name);\n            let res = await req.json();\n            let decod = Buffer.from(this.asset_name, \"hex\").toString();\n            try {\n                if (res[0].minting_tx_metadata && res[0].minting_tx_metadata[721]) {\n                    if (res[0].minting_tx_metadata[721][this.policy_id][decod]) {\n                        this.onchain_metadata = res[0].minting_tx_metadata[721][this.policy_id][decod];\n                        this.ipfs = getIpfsFromMetadata(res[0].minting_tx_metadata[721][this.policy_id][decod]);\n                        if (this.ipfs == \"/black.jpeg\") {\n                            this.ipfs = getIpfsFromMetadata(res[0].token_registry_metadata);\n                        }\n                    } else {\n                        this.onchain_metadata = res[0].minting_tx_metadata;\n                    }\n                }\n                if (res[0].token_registry_metadata) {\n                    this.metadata = res[0].token_registry_metadata;\n                    let ipfs = getIpfsFromMetadata(res[0].token_registry_metadata);\n                    if (ipfs != \"\") {\n                        this.ipfs = ipfs;\n                    } else {}\n                } else if (!res[0].minting_tx_metadata) {\n                    console.log(\"no metadata found\");\n                }\n            } catch (error) {\n                console.error(error, res);\n            }\n        } catch (error) {\n            console.error(\"Error in fetchTokenMetadata:\", error);\n        }\n    }\n    async fetchTokenPrice() {\n        if (this.quantity == 1) {\n            try {\n                let request = await fetch(\"https://api.opencnft.io/2/collection/\" + this.policy_id + \"/floor_price\", {\n                    headers: {\n                        \"X-Api-Key\": \"ocnft_64230513320ac06596270a21\"\n                    }\n                });\n                if (request.status == 429) {\n                    //wait 5 seconds and try again\n                    await new Promise((r)=>setTimeout(r, 200));\n                    request = await fetch(\"https://api.opencnft.io/2/collection/\" + this.policy_id + \"/floor_price\", {\n                        headers: {\n                            \"X-Api-Key\": \"ocnft_64230513320ac06596270a21\"\n                        }\n                    });\n                } else if (request.status == 200) {\n                    let opencnftData = await request.json();\n                    if (opencnftData.floor_price) {\n                        this.floor_price = opencnftData.floor_price / 1000000;\n                    }\n                } else {\n                    this.floor_price = 0;\n                }\n            } catch (error) {\n                this.floor_price = 0;\n            }\n        } else {\n            try {\n                var _this_metadata;\n                let request = await fetch(\"/coin-gecko-id-cardano.json\");\n                let geckoData = await request.json();\n                let ticker = (_this_metadata = this.metadata) === null || _this_metadata === void 0 ? void 0 : _this_metadata.ticker;\n                if (!ticker) {\n                    return;\n                }\n                let foundGeckoCoin = geckoData.find((item)=>item.symbol === ticker.toLowerCase());\n                if (!foundGeckoCoin) {\n                    return;\n                }\n                let req = await fetch(\"https://api.coingecko.com/api/v3/coins/\".concat(foundGeckoCoin.id));\n                let res = await req.json();\n                let priceData = res.market_data;\n                this.prices = {\n                    current: priceData.current_price.usd,\n                    change24h: priceData.price_change_percentage_24h,\n                    change7d: priceData.price_change_percentage_7d,\n                    change30d: priceData.price_change_percentage_30d,\n                    change1y: priceData.price_change_percentage_1y\n                };\n            } catch (error) {\n                this.prices = null;\n            }\n        }\n    }\n    constructor(asset_name, policy_id, quantity){\n        this.asset_name = asset_name;\n        this.policy_id = policy_id;\n        this.quantity = quantity;\n        this.onchain_metadata = null;\n        this.metadata = null;\n        this.ipfs = \"/black.jpeg\";\n        this.prices = null;\n        this.decoded_name = Buffer.from(asset_name, \"hex\").toString();\n        this.floor_price = null;\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/token.js\n"));

/***/ })

});