"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsCollector = void 0;
const utils_1 = require("./utils");
class MetricsCollector {
    constructor(interval, options) {
        this.metrics = {};
        this._getPrefixedKey = (key) => `${this.prefix}_${key}`;
        this._collect = async () => {
            var _a;
            const additional = await ((_a = this.getAdditionalMetrics) === null || _a === void 0 ? void 0 : _a.call(this));
            const additionalFormatted = {};
            for (const key in additional) {
                additionalFormatted[this._getPrefixedKey(key)] = additional[key];
            }
            return {
                // https://nodejs.org/api/process.html#processmemoryusage
                [this._getPrefixedKey('rss')]: process.memoryUsage().rss,
                [this._getPrefixedKey('total')]: process.memoryUsage().heapTotal,
                [this._getPrefixedKey('heap_used')]: process.memoryUsage().heapUsed,
                [this._getPrefixedKey('external')]: process.memoryUsage().external,
                [this._getPrefixedKey('array_buffers')]: process.memoryUsage().arrayBuffers,
                ...additionalFormatted,
            };
        };
        this.startCollector = async (interval) => {
            this.metrics = await this._collect();
            this.intervalId = setInterval(async () => {
                this.metrics = await this._collect();
            }, interval);
        };
        this.stopCollector = () => {
            if (this.intervalId !== undefined) {
                clearInterval(this.intervalId);
            }
        };
        this.toPrometheus = () => {
            return (0, utils_1.jsonToPrometheus)(this.metrics);
        };
        this.prefix = options.prefix;
        this.getAdditionalMetrics = options.getAdditionalMetrics;
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.startCollector(interval);
    }
}
exports.MetricsCollector = MetricsCollector;
