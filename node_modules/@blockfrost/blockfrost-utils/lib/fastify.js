"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleInvalidStakeAddress = exports.handleInvalidPool = exports.handleInvalidPolicy = exports.handleInvalidAsset = exports.handleInvalidAddress = exports.handleFastifyError = exports.handle500 = exports.handle415 = exports.handle404 = exports.handle403Custom = exports.handle403 = exports.handle402 = exports.handle400Custom = exports.handle400 = exports.errorHandler = exports.notFoundHandler = void 0;
const notFoundHandler = (_request, reply) => {
    return reply
        .code(400)
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
        error: 'Bad Request',
        message: 'Invalid path. Please check https://docs.blockfrost.io/',
        status_code: 400,
    });
};
exports.notFoundHandler = notFoundHandler;
const errorHandler = (error, request, reply) => {
    // Validation errors from parsing POST body or request parameters
    // Note: Response body is not validated, but it could still throw
    // serialization error (generic js Error) if it doesn't match the provided schema.
    if (error.statusCode === 400 || error.validation) {
        return (0, exports.handle400)(reply, error);
    }
    // TODO: investigate if these are needed
    if (reply.statusCode === 400) {
        return (0, exports.handle400)(reply, error);
    }
    if (reply.statusCode === 404) {
        return (0, exports.handle404)(reply);
    }
    if (error.statusCode === 415) {
        return (0, exports.handle415)(reply, error);
    }
    if (error.statusCode === 500) {
        return (0, exports.handle500)(reply, error, request);
    }
    if (error.statusCode !== undefined) {
        // Handle other Fastify errors with statusCode
        return (0, exports.handleFastifyError)(reply, error, request);
    }
    // Handle generic js errors
    return (0, exports.handle500)(reply, error, request);
};
exports.errorHandler = errorHandler;
const handle400 = (reply, error) => reply
    .code(400)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Bad Request',
    message: error.message,
    status_code: 400,
});
exports.handle400 = handle400;
const handle400Custom = (reply, message) => reply
    .code(400)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Bad Request',
    message: message,
    status_code: 400,
});
exports.handle400Custom = handle400Custom;
const handle402 = (reply) => reply
    .code(402)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Project Over Limit',
    message: 'Usage is over limit.',
    status_code: 402,
});
exports.handle402 = handle402;
const handle403 = (reply) => reply
    .code(403)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Forbidden',
    message: 'Invalid project token.',
    status_code: 403,
});
exports.handle403 = handle403;
const handle403Custom = (reply, message) => reply
    .code(403)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Forbidden',
    message: message,
    status_code: 403,
});
exports.handle403Custom = handle403Custom;
const handle404 = (reply) => reply
    .code(404)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Not Found',
    message: 'The requested component has not been found.',
    status_code: 404,
});
exports.handle404 = handle404;
const handle415 = (reply, error) => reply
    .code(415)
    .header('Content-Type', 'application/json; charset=utf-8')
    .send({
    error: 'Unsupported Media Type',
    message: error.message,
    status_code: 415,
});
exports.handle415 = handle415;
const handle500 = (reply, error, request) => {
    if (process.env.NODE_ENV !== 'test') {
        console.error(`Error in ${request.url}.`, error);
    }
    return reply
        .code(500)
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
        error: 'Internal Server Error',
        message: 'An unexpected response was received from the backend.',
        status_code: 500,
    });
};
exports.handle500 = handle500;
const handleFastifyError = (reply, error, request) => {
    if (process.env.NODE_ENV !== 'test') {
        console.error(`Error in ${request.url}.`, error);
    }
    return reply
        .code(error.statusCode)
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
        // error.name is always "FastifyError", use error.code to provide more info to a client (eg. FST_ERR_CTP_INVALID_MEDIA_TYPE)
        error: error.name,
        message: error.message,
        status_code: error.statusCode,
    });
};
exports.handleFastifyError = handleFastifyError;
const handleInvalidAddress = (reply) => {
    return (0, exports.handle400Custom)(reply, 'Invalid address for this network or malformed address format.');
};
exports.handleInvalidAddress = handleInvalidAddress;
const handleInvalidAsset = (reply) => {
    return (0, exports.handle400Custom)(reply, 'Invalid or malformed asset format.');
};
exports.handleInvalidAsset = handleInvalidAsset;
const handleInvalidPolicy = (reply) => {
    return (0, exports.handle400Custom)(reply, 'Invalid or malformed policy format.');
};
exports.handleInvalidPolicy = handleInvalidPolicy;
const handleInvalidPool = (reply) => {
    return (0, exports.handle400Custom)(reply, 'Invalid or malformed pool id format.');
};
exports.handleInvalidPool = handleInvalidPool;
const handleInvalidStakeAddress = (reply) => {
    return (0, exports.handle400Custom)(reply, 'Invalid or malformed stake address format.');
};
exports.handleInvalidStakeAddress = handleInvalidStakeAddress;
