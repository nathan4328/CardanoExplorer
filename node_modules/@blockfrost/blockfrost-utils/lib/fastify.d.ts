/// <reference types="node" />
import type { FastifyError, FastifyRequest, FastifyReply } from 'fastify';
declare type FastifyErrorWithStatusCode = FastifyError & {
    statusCode: NonNullable<FastifyError['statusCode']>;
};
export declare const notFoundHandler: (_request: FastifyRequest, reply: FastifyReply) => FastifyReply;
export declare const errorHandler: (error: FastifyError, request: FastifyRequest, reply: FastifyReply) => FastifyReply;
export declare const handle400: (reply: FastifyReply, error: FastifyError) => FastifyReply;
export declare const handle400Custom: (reply: FastifyReply, message: string) => FastifyReply;
export declare const handle402: (reply: FastifyReply) => FastifyReply;
export declare const handle403: (reply: FastifyReply) => FastifyReply;
export declare const handle403Custom: (reply: FastifyReply, message: string) => FastifyReply;
export declare const handle404: (reply: FastifyReply) => FastifyReply;
export declare const handle415: (reply: FastifyReply, error: FastifyError) => FastifyReply;
export declare const handle500: (reply: FastifyReply, error: unknown, request: FastifyRequest) => FastifyReply;
export declare const handleFastifyError: (reply: FastifyReply, error: FastifyErrorWithStatusCode, request: FastifyRequest) => FastifyReply;
export declare const handleInvalidAddress: (reply: FastifyReply) => FastifyReply<import("fastify").RawServerDefault, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify").FastifySchema, import("fastify").FastifyTypeProviderDefault, unknown>;
export declare const handleInvalidAsset: (reply: FastifyReply) => FastifyReply<import("fastify").RawServerDefault, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify").FastifySchema, import("fastify").FastifyTypeProviderDefault, unknown>;
export declare const handleInvalidPolicy: (reply: FastifyReply) => FastifyReply<import("fastify").RawServerDefault, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify").FastifySchema, import("fastify").FastifyTypeProviderDefault, unknown>;
export declare const handleInvalidPool: (reply: FastifyReply) => FastifyReply<import("fastify").RawServerDefault, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify").FastifySchema, import("fastify").FastifyTypeProviderDefault, unknown>;
export declare const handleInvalidStakeAddress: (reply: FastifyReply) => FastifyReply<import("fastify").RawServerDefault, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify").FastifySchema, import("fastify").FastifyTypeProviderDefault, unknown>;
export {};
