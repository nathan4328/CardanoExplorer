"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOnchainMetadata = exports.getOnchainMetadataVersion = exports.getCIPstandard = void 0;
const index_1 = require("../index");
const getCIPstandard = (version, isValid) => {
    if (isValid) {
        if (version === 1) {
            return 'CIP25v1';
        }
        if (version === 2) {
            return 'CIP25v2';
        }
    }
    return null;
};
exports.getCIPstandard = getCIPstandard;
const getOnchainMetadataVersion = (onchainMetadata) => {
    if (!onchainMetadata?.version) {
        return 1;
    }
    return Number(onchainMetadata.version);
};
exports.getOnchainMetadataVersion = getOnchainMetadataVersion;
const getOnchainMetadata = (onchainMetadata, assetName, policyId) => {
    let internalOnchainMetada = onchainMetadata;
    if (!internalOnchainMetada)
        return { onchainMetadata: null, validCIPversion: null };
    let isFound = false;
    let onchainMetadataResult = null;
    let validCIPversion = null;
    const version = (0, exports.getOnchainMetadataVersion)(onchainMetadata);
    const assetNameBase = assetName || '';
    const assetNameVersion1 = Buffer.from(assetNameBase || '', 'hex').toString('utf8');
    const assetNameVersion2 = assetNameBase;
    if (version === 1) {
        try {
            onchainMetadataResult =
                internalOnchainMetada[policyId][assetNameVersion1] || null;
            isFound = true;
        }
        catch (error) {
            onchainMetadataResult = null;
        }
    }
    if (version === 2) {
        try {
            const foundMetadata = internalOnchainMetada[policyId][assetNameVersion2] || null;
            if (foundMetadata) {
                onchainMetadataResult = foundMetadata;
                isFound = true;
            }
            else {
                // fallback
                onchainMetadataResult =
                    internalOnchainMetada[policyId][assetNameVersion1] || null;
                isFound = false;
            }
        }
        catch (error) {
            onchainMetadataResult = null;
        }
    }
    const { isValid } = (0, index_1.validateSchema)('asset_onchain_metadata_cip25', onchainMetadataResult);
    const CIPVersion = (0, exports.getCIPstandard)(version, isFound && isValid);
    validCIPversion = CIPVersion;
    return {
        onchainMetadata: onchainMetadataResult,
        validCIPversion,
    };
};
exports.getOnchainMetadata = getOnchainMetadata;
