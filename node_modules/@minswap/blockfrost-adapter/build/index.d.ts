import { PaginationOptions } from '@blockfrost/blockfrost-js/lib/types';
import Big from 'big.js';

declare enum NetworkId {
    TESTNET = 0,
    MAINNET = 1
}
declare type Value = {
    unit: string;
    quantity: string;
}[];
declare type TxIn = {
    txHash: string;
    index: number;
};

/**
 * Represents state of a pool UTxO. The state could be latest state or a historical state.
 */
declare class PoolState {
    /** The transaction hash and output index of the pool UTxO */
    readonly txIn: TxIn;
    readonly value: Value;
    readonly datumHash: string | null;
    readonly assetA: string;
    readonly assetB: string;
    constructor(txIn: TxIn, value: Value, datumHash: string | null);
    get nft(): string;
    get id(): string;
    get assetLP(): string;
    get reserveA(): bigint;
    get reserveB(): bigint;
    /**
     * Get the output amount if we swap a certain amount of a token in the pair
     * @param assetIn The asset that we want to swap from
     * @param amountIn The amount that we want to swap from
     * @returns The amount of the other token that we get from the swap
     */
    getAmountOut(assetIn: string, amountIn: bigint): bigint;
    /**
     * Get the input amount needed if we want to get a certain amount of a token in the pair from swapping
     * @param assetOut The asset that we want to get from the pair
     * @param amountOut The amount of assetOut that we want get from the swap
     * @returns The amount needed of the input token for the swap
     */
    getAmountIn(assetOut: string, amountOut: bigint): bigint;
}
/**
 * Represents a historical point of a pool.
 */
declare type PoolHistory = {
    txHash: string;
    /** Transaction index within the block */
    txIndex: number;
    blockHeight: number;
    time: Date;
};

declare type BlockfrostAdapterOptions = {
    projectId: string;
    networkId?: NetworkId;
};
declare type GetPoolsParams = Omit<PaginationOptions, "page"> & {
    page: number;
};
declare type GetPoolByIdParams = {
    id: string;
};
declare type GetPoolPriceParams = {
    pool: PoolState;
    decimalsA?: number;
    decimalsB?: number;
};
declare type GetPoolHistoryParams = PaginationOptions & {
    id: string;
};
declare type GetPoolInTxParams = {
    txHash: string;
};
declare class BlockfrostAdapter {
    private readonly networkId;
    private readonly api;
    constructor({ projectId, networkId, }: BlockfrostAdapterOptions);
    /**
     *
     * @returns The latest pools or empty array if current page is after last page
     */
    getPools({ page, count, order, }: GetPoolsParams): Promise<PoolState[]>;
    /**
     * Get a specific pool by its ID.
     * @param {Object} params - The parameters.
     * @param {string} params.pool - The pool ID. This is the asset name of a pool's NFT and LP tokens. It can also be acquired by calling pool.id.
     * @returns {PoolState | null} - Returns the pool or null if not found.
     */
    getPoolById({ id, }: GetPoolByIdParams): Promise<PoolState | null>;
    getPoolHistory({ id, page, count, order, }: GetPoolHistoryParams): Promise<PoolHistory[]>;
    /**
     * Get pool state in a transaction.
     * @param {Object} params - The parameters.
     * @param {string} params.txHash - The transaction hash containing pool output. One of the way to acquire is by calling getPoolHistory.
     * @returns {PoolState} - Returns the pool state or null if the transaction doesn't contain pool.
     */
    getPoolInTx({ txHash, }: GetPoolInTxParams): Promise<PoolState | null>;
    getAssetDecimals(asset: string): Promise<number>;
    /**
     * Get pool price.
     * @param {Object} params - The parameters to calculate pool price.
     * @param {string} params.pool - The pool we want to get price.
     * @param {string} [params.decimalsA] - The decimals of assetA in pool, if undefined then query from Blockfrost.
     * @param {string} [params.decimalsB] - The decimals of assetB in pool, if undefined then query from Blockfrost.
     * @returns {[string, string]} - Returns a pair of asset A/B price and B/A price, adjusted to decimals.
     */
    getPoolPrice({ pool, decimalsA, decimalsB, }: GetPoolPriceParams): Promise<[Big, Big]>;
}

declare const ORDER_ADDRESS: {
    0: string;
    1: string;
};
declare const POOL_ADDRESS: {
    0: string;
    1: string;
};
declare const FACTORY_POLICY_ID = "13aa2accf2e1561723aa26871e071fdf32c867cff7e7d50ad470d62f";
declare const FACTORY_ASSET_NAME = "4d494e53574150";
declare const LP_POLICY_ID = "e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86";
declare const POOL_NFT_POLICY_ID = "0be55d262b29f564998ff81efe21bdc0022621c12f15af08d0f2ddb1";

export { BlockfrostAdapter, BlockfrostAdapterOptions, FACTORY_ASSET_NAME, FACTORY_POLICY_ID, GetPoolByIdParams, GetPoolHistoryParams, GetPoolInTxParams, GetPoolPriceParams, GetPoolsParams, LP_POLICY_ID, NetworkId, ORDER_ADDRESS, POOL_ADDRESS, POOL_NFT_POLICY_ID, PoolState };
