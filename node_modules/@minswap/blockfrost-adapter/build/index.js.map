{"version":3,"file":"index.js","sources":["../src/types.ts","../src/constants.ts","../src/pool.ts","../src/adapter.ts"],"sourcesContent":["export enum NetworkId {\n  TESTNET = 0,\n  MAINNET,\n}\n\nexport type Value = {\n  unit: string;\n  quantity: string;\n}[];\n\nexport type TxIn = {\n  txHash: string;\n  index: number;\n};\n","import { NetworkId } from \"./types\";\n\nexport const ORDER_ADDRESS = {\n  [NetworkId.TESTNET]:\n    \"addr_test1wzn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uwc5lpd8w\",\n  [NetworkId.MAINNET]:\n    \"addr1wxn9efv2f6w82hagxqtn62ju4m293tqvw0uhmdl64ch8uwc0h43gt\",\n};\n\nexport const POOL_ADDRESS = {\n  [NetworkId.TESTNET]:\n    \"addr_test1zrsnz7c4974vzdpxu65ruphl3zjdvtxw8strf2c2tmqnxzvrajt8r8wqtygrfduwgukk73m5gcnplmztc5tl5ngy0upqs8q93k\",\n  [NetworkId.MAINNET]:\n    \"addr1z8snz7c4974vzdpxu65ruphl3zjdvtxw8strf2c2tmqnxz2j2c79gy9l76sdg0xwhd7r0c0kna0tycz4y5s6mlenh8pq0xmsha\",\n};\n\nexport const FACTORY_POLICY_ID =\n  \"13aa2accf2e1561723aa26871e071fdf32c867cff7e7d50ad470d62f\";\nexport const FACTORY_ASSET_NAME = \"4d494e53574150\";\nexport const LP_POLICY_ID =\n  \"e4214b7cce62ac6fbba385d164df48e157eae5863521b4b67ca71d86\";\nexport const POOL_NFT_POLICY_ID =\n  \"0be55d262b29f564998ff81efe21bdc0022621c12f15af08d0f2ddb1\";\n","import invariant from \"@minswap/tiny-invariant\";\n\nimport {\n  FACTORY_ASSET_NAME,\n  FACTORY_POLICY_ID,\n  LP_POLICY_ID,\n  POOL_ADDRESS,\n  POOL_NFT_POLICY_ID,\n} from \"./constants\";\nimport { NetworkId, TxIn, Value } from \"./types\";\n\n// ADA goes first\n// If non-ADA, then sort lexicographically\nexport function normalizeAssets(a: string, b: string): [string, string] {\n  if (a === \"lovelace\") {\n    return [a, b];\n  }\n  if (b === \"lovelace\") {\n    return [b, a];\n  }\n  if (a < b) {\n    return [a, b];\n  } else {\n    return [b, a];\n  }\n}\n\n/**\n * Represents state of a pool UTxO. The state could be latest state or a historical state.\n */\nexport class PoolState {\n  /** The transaction hash and output index of the pool UTxO */\n  public readonly txIn: TxIn;\n  public readonly value: Value;\n  public readonly datumHash: string | null;\n  public readonly assetA: string;\n  public readonly assetB: string;\n\n  constructor(txIn: TxIn, value: Value, datumHash: string | null) {\n    this.txIn = txIn;\n    this.value = value;\n    this.datumHash = datumHash;\n\n    const nft = value.find(({ unit }) => unit.startsWith(POOL_NFT_POLICY_ID));\n    invariant(nft, \"pool doesn't have NFT\");\n    const poolId = nft.unit.slice(56);\n    // validate and memoize assetA and assetB\n    const relevantAssets = value.filter(\n      ({ unit }) =>\n        !unit.startsWith(FACTORY_POLICY_ID) && // factory token\n        !unit.endsWith(poolId) // NFT and LP tokens from profit sharing\n    );\n    switch (relevantAssets.length) {\n      case 2: {\n        // ADA/A pool\n        this.assetA = \"lovelace\";\n        const nonADAAssets = relevantAssets.filter(\n          ({ unit }) => unit !== \"lovelace\"\n        );\n        invariant(nonADAAssets.length === 1, \"pool must have 1 non-ADA asset\");\n        this.assetB = nonADAAssets[0].unit;\n        break;\n      }\n      case 3: {\n        // A/B pool\n        const nonADAAssets = relevantAssets.filter(\n          ({ unit }) => unit !== \"lovelace\"\n        );\n        invariant(nonADAAssets.length === 2, \"pool must have 1 non-ADA asset\");\n        [this.assetA, this.assetB] = normalizeAssets(\n          nonADAAssets[0].unit,\n          nonADAAssets[1].unit\n        );\n        break;\n      }\n      default:\n        throw new Error(\n          \"pool must have 2 or 3 assets except factory, NFT and LP tokens\"\n        );\n    }\n  }\n\n  get nft(): string {\n    const nft = this.value.find(({ unit }) =>\n      unit.startsWith(POOL_NFT_POLICY_ID)\n    );\n    invariant(nft, \"pool doesn't have NFT\");\n    return nft.unit;\n  }\n\n  get id(): string {\n    // a pool's ID is the NFT's asset name\n    return this.nft.slice(POOL_NFT_POLICY_ID.length);\n  }\n\n  get assetLP(): string {\n    return `${LP_POLICY_ID}${this.id}`;\n  }\n\n  get reserveA(): bigint {\n    return BigInt(\n      this.value.find(({ unit }) => unit === this.assetA)?.quantity ?? \"0\"\n    );\n  }\n\n  get reserveB(): bigint {\n    return BigInt(\n      this.value.find(({ unit }) => unit === this.assetB)?.quantity ?? \"0\"\n    );\n  }\n\n  /**\n   * Get the output amount if we swap a certain amount of a token in the pair\n   * @param assetIn The asset that we want to swap from\n   * @param amountIn The amount that we want to swap from\n   * @returns The amount of the other token that we get from the swap\n   */\n  getAmountOut(assetIn: string, amountIn: bigint): bigint {\n    invariant(\n      assetIn === this.assetA || assetIn === this.assetB,\n      `asset ${assetIn} doesn't exist in pool ${this.assetA}-${this.assetB}`\n    );\n    const [reserveIn, reserveOut] =\n      assetIn === this.assetA\n        ? [this.reserveA, this.reserveB]\n        : [this.reserveB, this.reserveA];\n    const numerator = amountIn * 997n * reserveOut;\n    const denominator = amountIn * 997n + reserveIn * 1000n;\n    return numerator / denominator;\n  }\n\n  /**\n   * Get the input amount needed if we want to get a certain amount of a token in the pair from swapping\n   * @param assetOut The asset that we want to get from the pair\n   * @param amountOut The amount of assetOut that we want get from the swap\n   * @returns The amount needed of the input token for the swap\n   */\n  getAmountIn(assetOut: string, amountOut: bigint): bigint {\n    invariant(\n      assetOut === this.assetA || assetOut === this.assetB,\n      `asset ${assetOut} doesn't exist in pool ${this.assetA}-${this.assetB}`\n    );\n    const [reserveIn, reserveOut] =\n      assetOut === this.assetB\n        ? [this.reserveA, this.reserveB]\n        : [this.reserveB, this.reserveA];\n    const numerator = reserveIn * amountOut * 1000n;\n    const denominator = (reserveOut - amountOut) * 997n;\n    return numerator / denominator + 1n;\n  }\n}\n\n/**\n * Represents a historical point of a pool.\n */\nexport type PoolHistory = {\n  txHash: string;\n  /** Transaction index within the block */\n  txIndex: number;\n  blockHeight: number;\n  time: Date;\n};\n\nexport function checkValidPoolOutput(\n  networkId: NetworkId,\n  address: string,\n  value: Value,\n  datumHash: string | null\n): void {\n  invariant(\n    address === POOL_ADDRESS[networkId],\n    `expect pool address of ${POOL_ADDRESS[networkId]}, got ${address}`\n  );\n  // must have 1 factory token\n  if (\n    value.find(\n      ({ unit }) => unit === `${FACTORY_POLICY_ID}${FACTORY_ASSET_NAME}`\n    )?.quantity !== \"1\"\n  ) {\n    throw new Error(`expect pool to have 1 factory token`);\n  }\n  invariant(datumHash, `expect pool to have datum hash, got ${datumHash}`);\n}\n\nexport function isValidPoolOutput(\n  networkId: NetworkId,\n  address: string,\n  value: Value,\n  datumHash: string | null\n): boolean {\n  try {\n    checkValidPoolOutput(networkId, address, value, datumHash);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n","import {\n  BlockFrostAPI,\n  BlockfrostServerError,\n} from \"@blockfrost/blockfrost-js\";\nimport { PaginationOptions } from \"@blockfrost/blockfrost-js/lib/types\";\nimport Big from \"big.js\";\n\nimport { POOL_ADDRESS, POOL_NFT_POLICY_ID } from \"./constants\";\nimport {\n  checkValidPoolOutput,\n  isValidPoolOutput,\n  PoolHistory,\n  PoolState,\n} from \"./pool\";\nimport { NetworkId } from \"./types\";\n\nexport type BlockfrostAdapterOptions = {\n  projectId: string;\n  networkId?: NetworkId;\n};\n\nexport type GetPoolsParams = Omit<PaginationOptions, \"page\"> & {\n  page: number;\n};\n\nexport type GetPoolByIdParams = {\n  id: string;\n};\n\nexport type GetPoolPriceParams = {\n  pool: PoolState;\n  decimalsA?: number;\n  decimalsB?: number;\n};\n\nexport type GetPoolHistoryParams = PaginationOptions & {\n  id: string;\n};\n\nexport type GetPoolInTxParams = {\n  txHash: string;\n};\n\nexport class BlockfrostAdapter {\n  private readonly networkId: NetworkId;\n  private readonly api: BlockFrostAPI;\n\n  constructor({\n    projectId,\n    networkId = NetworkId.MAINNET,\n  }: BlockfrostAdapterOptions) {\n    this.networkId = networkId;\n    this.api = new BlockFrostAPI({\n      projectId,\n      isTestnet: networkId === NetworkId.TESTNET,\n    });\n  }\n\n  /**\n   *\n   * @returns The latest pools or empty array if current page is after last page\n   */\n  public async getPools({\n    page,\n    count = 100,\n    order = \"asc\",\n  }: GetPoolsParams): Promise<PoolState[]> {\n    const utxos = await this.api.addressesUtxos(POOL_ADDRESS[this.networkId], {\n      count,\n      order,\n      page,\n    });\n    return utxos\n      .filter((utxo) =>\n        isValidPoolOutput(\n          this.networkId,\n          POOL_ADDRESS[this.networkId],\n          utxo.amount,\n          utxo.data_hash\n        )\n      )\n      .map(\n        (utxo) =>\n          new PoolState(\n            { txHash: utxo.tx_hash, index: utxo.output_index },\n            utxo.amount,\n            utxo.data_hash\n          )\n      );\n  }\n\n  /**\n   * Get a specific pool by its ID.\n   * @param {Object} params - The parameters.\n   * @param {string} params.pool - The pool ID. This is the asset name of a pool's NFT and LP tokens. It can also be acquired by calling pool.id.\n   * @returns {PoolState | null} - Returns the pool or null if not found.\n   */\n  public async getPoolById({\n    id,\n  }: GetPoolByIdParams): Promise<PoolState | null> {\n    const nft = `${POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count: 1,\n      page: 1,\n      order: \"desc\",\n    });\n    if (nftTxs.length === 0) {\n      return null;\n    }\n    return this.getPoolInTx({ txHash: nftTxs[0].tx_hash });\n  }\n\n  public async getPoolHistory({\n    id,\n    page = 1,\n    count = 100,\n    order = \"desc\",\n  }: GetPoolHistoryParams): Promise<PoolHistory[]> {\n    const nft = `${POOL_NFT_POLICY_ID}${id}`;\n    const nftTxs = await this.api.assetsTransactions(nft, {\n      count,\n      page,\n      order,\n    });\n    return nftTxs.map(\n      (tx): PoolHistory => ({\n        txHash: tx.tx_hash,\n        txIndex: tx.tx_index,\n        blockHeight: tx.block_height,\n        time: new Date(Number(tx.block_time) * 1000),\n      })\n    );\n  }\n\n  /**\n   * Get pool state in a transaction.\n   * @param {Object} params - The parameters.\n   * @param {string} params.txHash - The transaction hash containing pool output. One of the way to acquire is by calling getPoolHistory.\n   * @returns {PoolState} - Returns the pool state or null if the transaction doesn't contain pool.\n   */\n  public async getPoolInTx({\n    txHash,\n  }: GetPoolInTxParams): Promise<PoolState | null> {\n    const poolTx = await this.api.txsUtxos(txHash);\n    const poolUtxo = poolTx.outputs.find(\n      (o) => o.address === POOL_ADDRESS[this.networkId]\n    );\n    if (!poolUtxo) {\n      return null;\n    }\n    checkValidPoolOutput(\n      this.networkId,\n      poolUtxo.address,\n      poolUtxo.amount,\n      poolUtxo.data_hash\n    );\n    return new PoolState(\n      { txHash: txHash, index: poolUtxo.output_index },\n      poolUtxo.amount,\n      poolUtxo.data_hash\n    );\n  }\n\n  public async getAssetDecimals(asset: string): Promise<number> {\n    if (asset === \"lovelace\") {\n      return 6;\n    }\n    try {\n      const assetAInfo = await this.api.assetsById(asset);\n      return assetAInfo.metadata?.decimals ?? 0;\n    } catch (err) {\n      if (err instanceof BlockfrostServerError && err.status_code === 404) {\n        return 0;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Get pool price.\n   * @param {Object} params - The parameters to calculate pool price.\n   * @param {string} params.pool - The pool we want to get price.\n   * @param {string} [params.decimalsA] - The decimals of assetA in pool, if undefined then query from Blockfrost.\n   * @param {string} [params.decimalsB] - The decimals of assetB in pool, if undefined then query from Blockfrost.\n   * @returns {[string, string]} - Returns a pair of asset A/B price and B/A price, adjusted to decimals.\n   */\n  public async getPoolPrice({\n    pool,\n    decimalsA,\n    decimalsB,\n  }: GetPoolPriceParams): Promise<[Big, Big]> {\n    if (decimalsA === undefined) {\n      decimalsA = await this.getAssetDecimals(pool.assetA);\n    }\n    if (decimalsB === undefined) {\n      decimalsB = await this.getAssetDecimals(pool.assetB);\n    }\n    const adjustedReserveA = Big(pool.reserveA.toString()).div(\n      Big(10).pow(decimalsA)\n    );\n    const adjustedReserveB = Big(pool.reserveB.toString()).div(\n      Big(10).pow(decimalsB)\n    );\n    const priceAB = adjustedReserveA.div(adjustedReserveB);\n    const priceBA = adjustedReserveB.div(adjustedReserveA);\n    return [priceAB, priceBA];\n  }\n}\n"],"names":["invariant","BlockFrostAPI","BlockfrostServerError","Big"],"mappings":"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"}